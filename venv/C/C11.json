{
    "Write a function to display stack elements using Linked List. (store float data in stack )": "struct Node{\n    float data; \n    struct Node *next;\n}*head;\nvoid display()\n{\n    struct Node *temp;\n    temp=head;\n    while(temp!=NULL)\n    {\n        printf(\"%.2f\\n\",temp->data);\n        temp=temp->next;\n    }\n}",
    "Write a function to find peek of stack using Linked List.(store float data in stack )": "struct Node   \n{  \n    float data;  \n    struct Node *next;  \n}*head;\nvoid peek()\n{\n    printf(\"%.2f\\n\",head->data);\n}",
    "Write a function to pop an element from the given Stack using Liked List.(store char data in stack)": "struct Node   \n{  \n    char data;  \n    struct Node *next;  \n}*head;  \nvoid pop()  \n{  \n    struct Node *ptr;  \n    if(head==NULL)  \n    {  \n        printf(\"stack is empty\");  \n    }  \n    else  \n    {  \n        ptr=head;  \n        head=ptr->next;  \n        free(ptr);  \n    }  \n}  ",
    "Write a function to push an element in Stack using Linked List.( store integer data in stack)": "struct Node{\n    int data; \n    struct Node *next;\n}*head;\nvoid push(int data)\n{\n    struct Node *n=(struct Node *)malloc(sizeof(struct Node));\n    if(head==NULL)\n    {\n        n->data=data;\n        n->next=NULL;\n        head=n;\n    }\n    else\n    {\n        n->data=data;\n        n->next=head;\n        head=n;\n    }\n}",
    "Write functions to perform-push, pop, peek, display in Stack using Linked List.(store float data in stack)": "struct Node   \n{  \n    float data;  \n    struct Node *next;\n}*head;\nvoid push(float data)  \n{\n    struct Node *n=(struct Node *)malloc(sizeof(struct Node));\n    if(head==NULL)\n    {\n        n->data=data;\n        n->next=NULL;\n        head=n;\n    }\n    else\n    {\n        n->data=data;\n        n->next=head;\n        head=n;\n    }\n}  \nvoid pop()  \n{ \n    struct Node *ptr;\n    if(head==NULL)\n    {\n        printf(\"stack is empty\\n\");\n    }\n    else\n    {\n        ptr=head;\n        head=ptr->next;\n        free(ptr);\n    }\n}  \nvoid display()  \n{ \n    struct Node *temp;\n    temp=head;\n    printf(\"stack:\");\n    while(temp!=NULL)\n    {\n        printf(\"%.2f \",temp->data);\n        temp=temp->next;\n    }\n}  \nvoid peek()\n{\n    printf(\"\\nstack top:%.2f\\n\",head->data);\n}",
    "Write functions to perform-push, pop, peek, display in Stack using Linked List.(store char data in stack)": "struct Node   \n{  \n    char data;  \n    struct Node *next;\n}*head;\nvoid push(char data)  \n{\n    struct Node *n=(struct Node *)malloc(sizeof(struct Node));\n    if(head==NULL)\n    {\n        n->data=data;\n        n->next=NULL;\n        head=n;\n    }\n    else\n    {\n        n->data=data;\n        n->next=head;\n        head=n;\n    }\n}  \nvoid pop()  \n{ \n    struct Node *ptr;\n    if(head==NULL)\n    {\n        printf(\"stack is empty\\n\");\n    }\n    else\n    {\n        ptr=head;\n        head=ptr->next;\n        free(ptr);\n    }\n}  \nvoid display()  \n{ \n    struct Node *temp;\n    temp=head;\n    printf(\"stack:\");\n    while(temp!=NULL)\n    {\n        printf(\"%c \",temp->data);\n        temp=temp->next;\n    }\n}  \nvoid peek()\n{\n    printf(\"\\nstack top:%c\\n\",head->data);\n}",
    "Write a function to push an element in Stack using Linked List. (store double data in stack)": "struct Node   \n{  \n    float data;  \n    struct Node *next;\n}*head;\nvoid push(float data)  \n{\n    struct Node *n=(struct Node *)malloc(sizeof(struct Node));\n    if(head==NULL)\n    {\n        n->data=data;\n        n->next=NULL;\n        head=n;\n    }\n    else\n    {\n        n->data=data;\n        n->next=head;\n        head=n;\n    }\n}  \n",
    "Write a function to display queue elements using Linked List.(use double data in the queue)": "struct Node\n{\n   float data;\n   struct Node *next;\n}*front=NULL,*rear=NULL;\nvoid display()\n{\n    struct Node *temp;\n    temp=front;\n    if(temp==NULL)\n        printf(\"queue is empty\");\n    else\n    {\n        printf(\"Queue elements:\\n\");\n        while(temp!=NULL)\n        {\n            printf(\"%.3f\\n\",temp->data);\n            temp=temp->next;\n        }\n    }\n}",
    "Write a function to delete elements in queue using Linked List.(use character data in the queue)": "struct Node\n{\n   int data;\n   struct Node *next;\n}*front=NULL,*rear=NULL;\nvoid dequeue()\n{\n    struct Node *ptr;\n    if(front==NULL)\n    {\n        printf(\"Queue is Empty!!!\\n\");\n    }\n    else\n    {\n        ptr=front;\n        front=ptr->next;\n        free(ptr);\n    }\n}",
    "Code the function to find the peek of queue using linked list.(use float data in the queue)": "struct Node\n{\n   float data;\n   struct Node *next;\n}*front=NULL,*rear=NULL;\nvoid peek()\n{\n    printf(\"%.2f\",front->data);\n}",
    "Write a function to display queue elements using Linked List.(store float data in the queue)": "struct Node\n{\n   float data;\n   struct Node *next;\n}*front=NULL,*rear=NULL;\nvoid display()\n{\n    struct Node *temp;\n    temp=front;\n    if(temp==NULL)\n        printf(\"queue is empty\");\n    else\n    {\n        printf(\"queue elements:\\n\");\n        while(temp!=NULL)\n        {\n            printf(\"%.2f \\n\",temp->data);\n            temp=temp->next;\n        }\n    }\n}",
    "Write a function to delete elements in queue using Linked List.(use float data in the queue) ": "struct Node\n{\n   float data;\n   struct Node *next;\n}*front=NULL,*rear=NULL;\nvoid dequeue()\n{\n    struct Node *ptr;\n    if(front==NULL)\n    {\n        printf(\"Queue is Empty!!!\\n\");\n    }\n    else\n    {\n        ptr=front;\n        front=ptr->next;\n        free(ptr);\n    }\n}",
    "Code the function to find the peek of queue using linked list.(use integer data in the queue)": "struct Node\n{\n   int data;\n   struct Node *next;\n}*front=NULL,*rear=NULL;\nvoid peek()\n{\n    printf(\"%d\", front->data);\n}",
    "Write a function to display queue elements using Linked List.(use integer data in the queue)": "struct Node\n{\n   int data;\n   struct Node *next;\n}*front=NULL,*rear=NULL;\nvoid display()\n{\n    struct Node *temp;\n    temp=front;\n    if(temp==NULL)\n        printf(\"queue is empty\");\n    else\n    {\n        while(temp!=NULL)\n        {\n            printf(\"%d \\n\",temp->data);\n            temp=temp->next;\n        }\n    }\n}",
    "Write a function to insert elements in queue using Linked List.( use float data in queue) ": "struct Node\n{\n   float data;\n   struct Node *next;\n}*front=NULL,*rear=NULL;\nvoid enqueue(float data)\n{\n    struct Node *n=(struct Node *)malloc(sizeof(struct Node));\n    if(front==NULL)\n    {\n        front=n;\n        front->data=data;\n        n->next=NULL;\n        return;\n    }\n    struct Node *temp;\n    temp=front;\n    \n    while(temp->next!=NULL)\n    {\n        temp=temp->next;\n    }\n    n->data=data;\n    n->next=NULL;\n    temp->next=n;\n}",
    "Write functions to perform-enqueue, dequeue, peek, display in Queue using Linked List.(use float data in Queue)": "struct Node\n{\n   float data;\n   struct Node *next;\n}*front=NULL,*rear=NULL;\nvoid enqueue(float data)\n{\n    struct Node *n=(struct Node *)malloc(sizeof(struct Node));\n    if(front==NULL)\n    {\n        front=n;\n        front->data=data;\n        n->next=NULL;\n        return;\n    }\n    struct Node *temp;\n    temp=front;\n    \n    while(temp->next!=NULL)\n    {\n        temp=temp->next;\n    }\n    n->data=data;\n    n->next=NULL;\n    temp->next=n;\n}\nvoid display()\n{\n    struct Node *temp;\n    temp=front;\n    if(temp==NULL)\n        printf(\"queue is empty\");\n    else\n    {\n        printf(\"queue elements:\\n\");\n        while(temp!=NULL)\n        {\n            printf(\"%.2f \\n\",temp->data);\n            temp=temp->next;\n        }\n    }\n}\nvoid dequeue()\n{\n    struct Node *ptr;\n    if(front==NULL)\n    {\n        printf(\"Queue is Empty!!!\\n\");\n    }\n    else\n    {\n        ptr=front;\n        front=ptr->next;\n        free(ptr);\n    }\n}\nvoid peek()\n{\n    printf(\"peek:%.2f\\n\",front->data);\n}",
    "Write functions to perform-enqueue, dequeue, peek, display in Queue using Linked List.(use integer data in Queue)": "struct Node\n{\n   double data;\n   struct Node *next;\n}*front=NULL,*rear=NULL;\nvoid enqueue(double data)\n{\n   struct Node *newNode;\n   newNode=(struct Node*)malloc(sizeof(struct Node));\n   newNode->data=data;\n   newNode->next=NULL;\n   if(front==NULL)\n   {\n      front=rear=newNode;\n   }\n   else\n   {\n      rear->next=newNode;\n      rear=newNode;\n   }\n}\n",
    "Write a function to insert elements in queue using Linked List.( use double data in queue) ": "struct Node\n{\n   float data;\n   struct Node *next;\n}*front=NULL,*rear=NULL;\nvoid enqueue(float data)\n{\n    struct Node *n=(struct Node *)malloc(sizeof(struct Node));\n    if(front==NULL)\n    {\n        front=n;\n        front->data=data;\n        n->next=NULL;\n        return;\n    }\n    struct Node *temp;\n    temp=front;\n    \n    while(temp->next!=NULL)\n    {\n        temp=temp->next;\n    }\n    n->data=data;\n    n->next=NULL;\n    temp->next=n;\n}",
    "Write functions to perform-push, pop, peek, display in Stack using Linked List.(store integer data in stack)": "struct Node   \n{  \nint data;  \nstruct Node *next;  \n}*head;\nvoid push(int data)  \n{\n    struct Node *n=(struct Node *)malloc(sizeof(struct Node));\n    if(head==NULL)\n    {\n        n->data=data;\n        n->next=NULL;\n        head=n;\n    }\n    else\n    {\n        n->data=data;\n        n->next=head;\n        head=n;\n    }\n}  \nvoid pop()  \n{\n    struct Node *ptr;\n    if(head==NULL)\n    {\n        printf(\"stack is empty\");\n    }\n    else\n    {\n        ptr=head;\n        head=ptr->next;\n        free(ptr);\n    }\n}  \nvoid display()  \n{\n    struct Node *temp;\n    temp=head;\n    printf(\"stack:\");\n    while(temp!=NULL)\n    {\n        printf(\"%d \",temp->data);\n        temp=temp->next;\n    }\n}  \nvoid peek()\n{\n    printf(\"\\nstack top:%d\\n\",head->data);\n}",
    "Write a function to find peek of stack using Linked List.": "struct Node   \n{  \n    int data;  \n    struct Node *next;  \n}*head;\nvoid peek()\n{\n    printf(\"%d\",head->data);\n}",
    "Complete the calculate_the_maximum function in the editor below.": "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\nvoid calculate_the_maximum(int n,int k)\n{\n    int and=0,or=0,xor=0;\n    for(int i=1;i<=n;i++)\n    {\n        for (int j=i+1;j<=n;j++)\n        {\n            if((i&j)>and && (i&j)<k)\n                and=i&j;\n            if((i|j)>or && (i|j)<k)\n                or=i|j;\n            if((i^j)>xor && (i^j)<k)\n                xor=i^j;\n        }\n    }\n    printf(\"%d\\n%d\\n%d\",and,or,xor);\n}\nint main()\n{\n    int n,k;\n    scanf(\"%d %d\",&n,&k);\n    calculate_the_maximum(n,k);\n    return 0;\n}",
    "Write functions to perform-enqueue, dequeue, peek, display in Queue using Linked List.(use double data in Queue)": "struct Node\n{\n   float data;\n   struct Node *next;\n}*front=NULL,*rear=NULL;\nvoid enqueue(float data)\n{\n    struct Node *n=(struct Node *)malloc(sizeof(struct Node));\n    if(front==NULL)\n    {\n        front=n;\n        front->data=data;\n        n->next=NULL;\n        return;\n    }\n    struct Node *temp;\n    temp=front;\n    while(temp->next!=NULL)\n    {\n        temp=temp->next;\n    }\n    n->data=data;\n    n->next=NULL;\n    temp->next=n;\n}\nvoid display()\n{\n    struct Node *temp;\n    temp=front;\n    if(temp==NULL)\n        printf(\"queue is empty\");\n    else\n    {\n        printf(\"queue elements:\\n\");\n        while(temp!=NULL)\n        {\n            printf(\"%.3f\\n\",temp->data);\n            temp=temp->next;\n        }\n    }\n}\nvoid dequeue()\n{\n    struct Node *ptr;\n    if(front==NULL)\n    {\n        printf(\"queue is empty\");\n    }\n    else\n    {\n        ptr=front;\n        front=ptr->next;\n        free(ptr);\n    }\n}\nvoid peek()\n{\n    printf(\"peek:%.3f\\n\",front->data);\n}"
}