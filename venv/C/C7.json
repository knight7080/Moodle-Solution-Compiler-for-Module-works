{
    "Given a string, , consisting of alphabets and digits, find the frequency of each digit in the given string.": "#include<stdio.h> \n#include<string.h>\nint main ()\n{\n    char a[25];\n    int i, j, count = 0;\n    scanf(\"%[^\\n]s\", a);\n    char ch = '0';\n    for (i = 0; i < 10; i++)\n    {\n        for (j = 0; j < strlen(a); j++)\n        {\n            if (a[j] == ch)\n            {\n                count++;\n            }\n        }\n        printf(\"%d \", count);\n        count = 0;\n        ch++;\n    }\n    return 0;\n}",
    "Given an array of strings sorted in lexicographical order, print all of its permutations in strict lexicographical order. If two permutations look the same, only print one of them. See the 'note' below for an example.": "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\nvoid swap(char **s,int i,int j)\n{\n    char * temp=s[i];\n    s[i]=s[j];\n    s[j]=temp;\n}\nvoid reverse(char **s,int start,int end)\n{\n    while(start<end)\n    {\n        swap(s,start++,end--);\n    }\n}\nint next_permutation(int n,char **s)\n{\n    for(int i=n-2;i>-1;i--)\n    {\n        if(strcmp(s[i+1],s[i])>0)\n        {\n            for(int j=n-1;j>i;j--)\n            {\n                if(strcmp(s[j],s[i])>0)\n                {\n                    swap(s,i,j);\n                    reverse(s,i+1,n-1);\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}\nint main()\n{\n    char **s;\n    int n;\n    scanf(\"%d\",&n);\n    s=calloc(n,sizeof(char*));\n    for(int i=0;i<n;i++)\n    {\n        s[i]=calloc(11,sizeof(char));\n        scanf(\"%s\",s[i]);\n    }\n    do{\n        for(int i=0;i<n;i++)\n            printf(\"%s%c\",s[i],i==n-1?'\\n':' ');\n    }while(next_permutation(n,s));\n    for(int i=0;i<n;i++)\n        free(s[i]);\n    free(s);\n    return 0;\n}",
    "Print a pattern of numbers from  to  as shown below. Each of the numbers is separated by a single space.": "#include <stdio.h>\nint main() \n{\n    int n;\n    scanf(\"%d\", &n);\n    int len = n*2 - 1;\n    for(int i=0;i<len;i++)\n    {\n        for(int j=0;j<len;j++)\n        {\n            int min = i < j ? i : j;\n            min = min < len-i ? min : len-i-1;\n            min = min < len-j-1 ? min : len-j-1;\n            printf(\"%d \", n-min);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "create an array of size  dynamically, and read the values from stdin. Iterate the array calculating the sum of all elements. Print the sum and free the memory where the array is stored.": "#include<stdio.h>\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    int arr[n],sum=0;\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&arr[i]);\n        sum+=arr[i];\n    }\n    printf(\"%d\",sum);\n    return 0;\n}",
    "Task": "#include<stdio.h>\nint max_of_four(int a, int b, int c, int d) \n{\n    if(a>b && a>c && a>d)\n        return a;\n    else if(b>a && b>c && b>d)\n        return b;\n    else if(c>a && c>b && c>d)\n        return c;\n    else\n        return d;\n}\nint main()\n{\n    int a,b,c,d;\n    scanf(\"%d %d %d %d\",&a,&b,&c,&d);\n    int result=max_of_four(a,b,c,d);\n    printf(\"%d\",result);\n    return 0;\n}",
    "write a program to find given number is palindrome or not using recursion?": "#include<stdio.h>\nint palindrome(int n)\n{\n    int r,rev=0;\n    while(n!=0)\n    {\n        r=n%10;\n        rev=(rev*10)+r;\n        n=n/10;\n    }\n    return rev;\n}\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    int temp=n;\n    int rev=palindrome(n);\n    if(temp==rev)\n        printf(\"%d is palindrome number.\",temp);\n    else\n        printf(\"%d is NOT palindrome number.\",temp);\n    return 0;\n}"
}