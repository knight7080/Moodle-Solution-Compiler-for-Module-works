{
    "Write a function to delete a given element in the given linked list.": "struct Node{\n    char data; \n    struct Node *next;\n}*head;\nvoid delete()\n{\n    struct Node *temp;\n    if(head==NULL)\n    {\n        printf(\"List is empty\");\n    }\n    else\n    {\n        temp=head;\n        head=temp->next;\n        free(temp);\n        printf(\"Node deleted from the begining ...\\n\");\n    }\n}",
    "Write a function to traverse the linked list and display it in the following format.": "struct Node{\n    char data; \n    struct Node *next;\n}*head;\nvoid display()\n{\n    struct Node *temp;\n    temp=head;\n    while(temp!=NULL)\n    {\n        printf(\"%c \\n\",temp->data);\n        temp=temp->next;\n    }\n}",
    "Write the function to search a given element in the given linked list.": "struct Node{\n    int data; \n    struct Node *next;\n}*head;\nvoid display()\n{\n    struct Node *temp;\n    temp=head;\n    \n    while(temp!=NULL)\n    {\n        printf(\"%d \\n\",temp->data);\n        temp=temp->next;\n    }\n}",
    "Debug the function to search a given element in the given linked list.": "struct Node{\n    float data; \n    struct Node *next;\n}*head;\n\nvoid search(float data)\n{\n    struct Node *temp;\n    temp=head;\n    \n    int flag,i=1;\n    float dup=data;\n    \n    while(temp!=NULL)\n    {\n        if(temp->data==dup)\n        {\n            flag=0;\n            printf(\"item %.2f found at location %d\",temp->data,i);\n        }\n        i++;\n        temp=temp->next;\n    }\n    \n    if(flag!=0)\n    {\n        printf(\"Item not found\");\n    }\n}",
    "Debug a function to traverse the linked list and display it in the following format.": "struct Node{\n    float data; \n    struct Node *next;\n}*head;\n\nvoid search(float data)\n{\n    struct Node *ptr;\n    float item=data;\n    int i=0,flag;\n    ptr = head;\n    if(ptr == NULL)\n    {\n    printf(\"\\nEmpty List\\n\");\n    }\n    else\n    {\n       // printf(\"\\nEnter item which you want to search?\\n\");\n       // scanf(\"%d\",&item);\n        while (ptr!=NULL)\n        {\n            if(ptr->data == item)\n            {\n                printf(\"item %.2f found at location %d \",item,i+1);\n                flag=0;\n            }\n            /*else\n            {\n               flag=1;\n                //printf(\"item not found\");\n               \n            }*/\n            i++;\n            ptr = ptr -> next;\n        }\n        if(flag!=0)\n        {\n            printf(\"Item not found\\n\");\n        }\n    }\n \n}\n",
    "Debug a function to delete a given element in the given linked list.": "struct Node{\n    int data; \n    struct Node *next;\n}*head;\nvoid display()\n{\n    struct Node *temp;\n    temp = head;\n    while(temp!=NULL)\n    {\n        printf(\"%d \",temp->data);\n        temp = temp->next;\n    }\n    \n}",
    "Write a function to insert a node in a linked list.": "struct Node{\n    char data; \n    struct Node *next;\n}*head;\nvoid insert(char data)\n{\n    struct Node *n=(struct Node*)malloc(sizeof(struct Node));\n    struct Node *temp;\n    temp=head;\n    if(head==NULL)\n    {\n        head=n;\n        head->data=data;\n        n->next=NULL;\n        return;\n    }\n    while(temp->next!=NULL)\n    {\n        temp=temp->next;\n    }\n    n->data=data;\n    n->next=NULL;\n    temp->next=n;\n}",
    "Single Linked List all operations- Create, Display, Delete, Search": "struct Node{\n    int data; \n    struct Node *next;\n}*head;\nvoid display()\n{\n    struct Node *temp;\n    temp=head;\n    while(temp!=NULL)\n    {\n        printf(\"%d \\n\",temp->data);\n        temp=temp->next;\n    }\n}\nvoid insert(int data)\n{\n    struct Node *n=(struct Node*)malloc(sizeof(struct Node));\n    struct Node *temp;\n    \n    if(head==NULL)\n    {\n        head=n;\n        head->data=data;\n        n->next=NULL;\n        return;\n    }\n    temp=head;\n    while(temp->next!=NULL)\n    {\n        temp=temp->next;\n    }\n    n->data=data;\n    n->next=NULL;\n    temp->next=n;    \n}\nvoid search(int data)\n{\n    struct Node *temp;\n    temp=head;\n    int dup=data, flag, loc=1;\n    \n    while(temp!=NULL)\n    {\n        if(dup==temp->data)\n        {\n            printf(\"item %d found at location %d\\n\",temp->data,loc);\n            flag=0;\n        }\n        loc++;\n        temp=temp->next;\n    }\n    if(flag!=0)\n    {\n        printf(\"Item not found \\n\");\n    }\n}\nvoid delete()\n{\n    struct Node *ptr;\n    if(head==NULL)\n    {\n        printf(\"List is empty\\n\");\n    }\n    else\n    {\n        ptr=head;\n        head=ptr->next;\n        free(ptr);\n        printf(\"Node deleted from the begining\\n\");\n    }\n}",
    "Debug a function to insert a node in a linked list.": "struct Node{\n    int data; \n    struct Node *next;\n}*head;\nvoid insert(int data)\n{\n    struct Node *n=(struct Node *)malloc(sizeof(struct Node));\n    if(head==NULL)\n    {\n        head=n;\n        head->data=data;\n        n->next=NULL;\n        return;\n    }\n    struct Node *temp;\n    temp=head;\n    while(temp->next!=NULL)\n    {\n        temp=temp->next;\n    }\n    n->data=data;\n    n->next=NULL;\n    temp->next=n;\n}",
    "Write a function to traverse a double linked list": "struct Node\n{\n    struct Node *prev;\n    struct Node *next;\n    float data;\n}*head;\nvoid display()\n{\n    struct Node *temp;\n    temp=head;\n    while(temp!=NULL)\n    {\n        printf(\"%.2f \",temp->data);\n        temp=temp->next;\n    }\n}",
    "Write a function to search an element in the double-linked list.": "struct Node{\n    char data; \n    struct Node *next;\n    struct Node *prev;\n\n}*head;\nvoid search(char data)\n{\n    struct Node *temp;\n    temp=head;\n    int flag, loc=1;\n    char dup=data;\n    while(temp!=NULL)\n    {\n        if(dup==temp->data)\n        {\n            printf(\"item %c found at location %d\\n\",temp->data,loc);\n            flag=0;\n        }\n        loc++;\n        temp=temp->next;\n    }\n    if(flag!=0)\n    {\n        printf(\"Item not found \\n\");\n    }\n}",
    "Write a function to delete an element in Double Linked List": "struct Node\n{\n    struct Node *prev;\n    struct Node *next;\n    int data;\n}*head;\nvoid delete()\n{\n    struct Node *ptr;\n    if(head==NULL)\n    {\n        printf(\"UNDERFLOW\");\n    }\n    else\n    {\n        ptr=head;\n        head=ptr->next;\n        free(ptr);\n        printf(\"node deleted\\n\");\n    }\n}",
    "Debug a function to traverse a double linked list": "struct Node\n{\n    struct Node *prev;\n    struct Node *next;\n    int data;\n}*head;\nvoid display()\n{\n    struct Node *temp;\n    temp=head;\n    while(temp!=NULL)\n    {\n        printf(\"%d \\n\",temp->data);\n        temp=temp->next;\n    }\n}",
    "Debug a function to search an element in the double-linked list.": "struct Node{\n    int data; \n    struct Node *next;\n    struct Node *prev;\n\n}*head;\nvoid search(int data)\n{\n    struct Node *temp;\n    temp=head;\n    int flag, loc=1;\n    int dup=data;\n    while(temp!=NULL)\n    {\n        if(dup==temp->data)\n        {\n            printf(\"item %d found at location %d\\n\",temp->data,loc);\n            flag=0;\n        }\n        loc++;\n        temp=temp->next;\n    }\n    if(flag!=0)\n    {\n        printf(\"Item not found \\n\");\n    }\n}",
    "Debug a function to delete an element in Double Linked List": "struct Node{\n    float data; \n    struct Node *next;\n    struct Node *prev;\n}*head;\nvoid delete()\n{\n    struct Node *ptr;\n    if(head==NULL)\n    {\n        printf(\"UNDERFLOW\\n\");\n    }\n    else\n    {\n        ptr=head;\n        head=ptr->next;\n        free(ptr);\n        printf(\"Node deleted\\n\");\n    }\n}",
    "Write a function to insert an element in double linked list": "struct Node\n{\n    struct Node *prev;\n    struct Node *next;\n    float data;\n}*head;\nvoid insert(float data)\n{\n    struct Node *n=(struct Node*)malloc(sizeof(struct Node));\n    struct Node *temp;\n    if(head==NULL)\n    {\n        head=n;\n        head->data=data;\n        n->next=NULL;\n        return;\n    }\n    temp=head;\n    while(temp->next!=NULL)\n    {\n        temp=temp->next;\n    }\n    n->data=data;\n    n->next=NULL;\n    temp->next=n;\n}",
    "Write a functions to perform all basic operations in Double Linked List.": "struct Node\n{\n    struct Node *prev;\n    struct Node *next;\n    float data;\n}*head;\nvoid display()\n{\n    struct Node *temp;\n    temp=head;\n    while(temp!=NULL)\n    {\n        printf(\"%.2f \",temp->data);\n        temp=temp->next;\n    }\n}\nvoid insert(float data)\n{\n    struct Node *n=(struct Node*)malloc(sizeof(struct Node));\n    struct Node *temp;\n    \n    if(head==NULL)\n    {\n        head=n;\n        head->data=data;\n        n->next=NULL;\n        return;\n    }\n    temp=head;\n    while(temp->next!=NULL)\n    {\n        temp=temp->next;\n    }\n    n->data=data;\n    n->next=NULL;\n    temp->next=n;    \n}\nvoid search(float data)\n{\n    struct Node *temp;\n    temp=head;\n    int flag, loc=1;\n    float dup=data;\n    \n    while(temp!=NULL)\n    {\n        if(dup==temp->data)\n        {\n            printf(\"item %.2f found at location %d\\n\",temp->data,loc);\n            flag=0;\n        }\n        loc++;\n        temp=temp->next;\n    }\n    if(flag!=0)\n    {\n        printf(\"Item not found \\n\");\n    }\n}\nvoid delete()\n{\n    struct Node *ptr;\n    if(head==NULL)\n    {\n        printf(\"UNDERFLOW\\n\");\n    }\n    else\n    {\n        ptr=head;\n        head=ptr->next;\n        free(ptr);\n        printf(\"Node deleted\\n\");\n    }\n}",
    "Debug a function to insert an element in double linked list": "struct Node\n{\n    struct Node *prev;\n    struct Node *next;\n    int data;\n}*head;\n\nvoid insert(int data)\n{\n   struct Node *ptr,*temp;\n //  int item;\n   ptr = (struct Node *) malloc(sizeof(struct Node));\n   if(ptr == NULL)\n   {\n       printf(\"OVERFLOW\\n\");\n   }\n   else\n   {\n       //printf(\"\\nEnter value\");\n       //scanf(\"%d\",&item);\n        ptr->data=data;\n       if(head == NULL)\n       {\n           ptr->next = NULL;\n           ptr->prev = NULL;\n           head = ptr;\n       }\n       else\n       {\n          temp = head;\n          while(temp->next!=NULL)\n          {\n              temp = temp->next;\n          }\n          \n          temp->next = ptr;\n          ptr ->prev=temp;\n          ptr->next = NULL;\n          }\n\n       }\n     //printf(\"\\nnode inserted\\n\");\n    }\n",
    "Debug a function to perform all basic operations in Double Linked List.": "struct Node\n{\n    struct Node *prev;\n    struct Node *next;\n    char data;\n}*head;\nvoid display()\n{\n    struct Node *ptr;\n    //printf(\"\\n printing values...\\n\");\n    ptr = head;\n    while(ptr != NULL)\n    {\n        printf(\"%c \",ptr->data);\n        ptr=ptr->next;\n    }\n}\nvoid insert(char data)\n{\n   struct Node *ptr,*temp;\n   ptr=(struct Node *)malloc(sizeof(struct Node));\n   if(ptr==NULL)\n   {\n       printf(\"OVERFLOW\\n\");\n   }\n   else\n   {\n       ptr->data=data;\n       if(head==NULL)\n       {\n           ptr->next=NULL;\n           ptr->prev=NULL;\n           head=ptr;\n       }\n       else\n       {\n          temp=head;\n          while(temp->next!=NULL)\n          {\n              temp=temp->next;\n          }\n          temp->next=ptr;\n          ptr->prev=temp;\n          ptr->next=NULL;\n        }\n    }\n}\nvoid search(char data)\n{\n    struct Node *ptr;\n    char item=data;\n    int i=0,flag;\n    ptr=head;\n    if(ptr==NULL)\n    {\n    printf(\"Empty List\\n\");\n    }\n    else\n    {\n       while(ptr!=NULL)\n        {\n            if(ptr->data==item)\n            {\n                printf(\"item %c found at location %d\\n\",item,i+1);\n                flag=0;\n            }\n           /* else\n            {\n               flag=1;\n            }*/\n            i++;\n            ptr=ptr->next;\n        }\n        if(flag!=0)\n        {\n            printf(\"Item not found\\n\");\n        }\n    }\n}\nvoid delete()\n{\n    struct Node *ptr;\n    if(head==NULL)\n    {\n        printf(\"UNDERFLOW\\n\");\n    }\n    else if(head->next==NULL)\n    {\n        head=NULL;\n        free(head);\n        printf(\"Node deleted\\n\");\n    }\n    else\n    {\n        ptr=head;\n        head=head->next;\n        head->prev=NULL;\n        free(ptr);\n        printf(\"Node deleted\\n\");\n    }\n}",
    "Write a C program to sort elements of array in ascending order.": "#include<stdio.h>\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    int arr[n],asc[n];\n    for(int i=0;i<n;i++)\n    {\n        scanf(\"%d\",&arr[i]);\n    }\n    for(int i=0;i<n;i++)\n    {\n        if(arr[i]>arr[i+1])\n        {\n            arr[i]=arr[i+1];\n        }\n        else\n        {\n            arr[i+1]=arr[i];\n        }\n    }\n    for(int i=1;i<n+1;i++)\n        asc[i]=i;\n    for(int i=1;i<n+1;i++)\n    {\n        printf(\"%d \",asc[i]);\n    }\n}"
}