{
    "Write A CPP Program to allocate memory dynamically for an integer variable. (Note: p_var = new typename;)": "#include <iostream>\nusing namespace std; \nclass var_space\n{\n  public:\n  void allocateSpace()\n  {\n      int *p_var = new int;\n      cin>>*p_var;\n      cout<<\"Integer Value is : \"<<*p_var;\n  }\n};\nint main()\n{\n    var_space s;\n    s.allocateSpace();\n}",
    "Write A CPP Program to allocate memory dynamically for a character array. (Note: p_array = new type [size]; )": "#include <iostream>\nusing namespace std; \nclass student\n{\n    public:\n    int i,n;\n    char *a=new char[5];\n    student()\n    {\n        cout<<\"Array Created\"<<endl;\n        cin>>n;\n        for(i=0;i<n;i++)\n        {\n            cin>>a[i];\n        }\n    }\n    ~student()\n    {\n        cout<<\"Array Values :\"<<endl;\n        for(i=0;i<n;i++)\n        {\n            cout<<a[i]<<\" \";\n        }\n        cout<<endl<<\"Array Deleted\";\n    }\n};\n\nint main()\n{\n    student s;\n}",
    "Write A CPP Program to allocate memory dynamically for an character variable. (Note: p_var = new typename;)": "#include <iostream>\nusing namespace std; \nclass var_space\n{\n  public:\n  string *p_var=new string;\n  void allocateSpace()\n  {\n      cin>>*p_var;\n      cout<<\"Character Value is : \"<<*p_var;\n  }\n};\nint main()\n{\n    var_space s;\n    s.allocateSpace();\n}",
    "Write A CPP Program to allocate memory dynamically for long integer array. (Note: p_array = new type [size]; )": "#include <iostream>\nusing namespace std; \nclass student\n{\n    public:\n    int i,n;\n    int *a=new int[5];\n    student()\n    {\n        cout<<\"Array Created\"<<endl;\n        cin>>n;\n        for(i=0;i<n;i++)\n        {\n            cin>>a[i];\n        }\n    }\n    ~student()\n    {\n        cout<<\"Array Values :\"<<endl;\n        cin>>n;\n        for(i=0;i<n;i++)\n        {\n            cout<<a[i]<<\" \";\n        }\n        cout<<endl<<\"Array Deleted\";\n    }\n};\n\nint main()\n{\n    student s;\n}",
    "Write A CPP Program to allocate memory dynamically for an double variable. (Note: p_var = new typename;)": "#include<iostream>\nusing namespace std; \nclass var_space\n{\n    public:\n    double *x=new double;\n    void allocateSpace()\n    {\n        double *val=new double;\n        cin>>*x;\n        val=x;\n        cout<<\"Double Value is : \"<<*val<<endl;\n        delete val;\n    }\n};\nint main()\n{\n   var_space obj;\n   obj.allocateSpace();    \n    \n}",
    "Write A CPP Program to allocate memory dynamically for a float array. (Note: p_array = new type [size]; )": "#include <iostream>\nusing namespace std; \nclass student {\npublic:\n    float *x=new float[10]; \n    float *val=new float[10];\n    int i,n;\n    student()\n    {\n        cout<<\"Array Created\"<<endl;\n    }\n    ~student()\n    {\n        delete val; \n        cout<<endl<<\"Array Deleted\"<<endl;\n    }\n    void createArray()\n    {\n        cin>>n;\n        for(i=0; i<n; i++)\n        {\n            cin>>*x;\n\t\t\tval[i]=*x;\n        }\n        cout<<\"Array Values :\"<<endl;\n        for(i=0; i<n; i++)\n        {\n            cout<<val[i]<<\" \";\n        }\n    }\n};\nint main()\n{\n    student S;\n    S.createArray();\n}",
    "Write A CPP Program to create class Box and calculate the volume of the Box, make use of static member variable in the class Box.": "#include <iostream>\nusing namespace std;\nclass Box\n{\n    public:\n    static int objectCount;\n    // Constructor definition\n    Box(double l, double b, double h)\n    {\n        cout <<\"Constructor called.\" << endl;\n        length = l;\n        breadth = b;\n        height = h;\n        // Increase every time object is created\n        objectCount++;\n    }\n    double volume()\n    {\n        return length*breadth*height;\n    }\n    private:\n    double length;     // Length of a box\n    double breadth;    // Breadth of a box\n    double height;     // Height of a box\n};\n\n// Initialize static member of class Box\nint Box::objectCount = 0;\n\nint main(void) \n{\n    int l,b,h;\n    cin>>l>>b>>h;\n    Box Box1(l,b,h);    // Declare box1\n    cout<<\"Volume :\"<<Box1.volume()<<endl;\n    cin>>l>>b>>h;\n    Box Box2(l,b,h);    // Declare box2\n    cout<<\"Volume :\"<<Box2.volume()<<endl;\n    // Print total number of objects.\n    cout<<\"Total objects: \"<<Box::objectCount<<endl;\n    return 0;\n}",
    "Write A CPP Program to create class  SquareBox and calculate the volume of the SquareBox, make use of static member variable and static member function in the class SquareBox. (Note: l=b=h)": "#include <iostream>\nusing namespace std;\nclass Square\n{\n    public:\n    static int objcount,stagecount;\n    Square(double l,double b,double h)\n    {\n        length=l;\n        breadth=b;\n        height=h;\n        cout<<\"Constructor called.\"<<endl;\n        objcount++;\n        stagecount++;\n    }\n    double Volume()\n    {\n        return length*breadth*height;\n    }\n    private:\n    double length;     // Length of a box\n    double breadth;    // Breadth of a box\n    double height;     // Height of a box\n};\nint Square::objcount=0;\nint Square::stagecount=0;\nint main(void) \n{\n    int l,b,h,l1,b1,h1;\n    cin>>l>>b>>h>>l1>>b1>>h1;\n    cout<<\"Inital Stage Count: \"<<Square::stagecount<<endl;\n    Square s1(l,b,h);\n    cout<<\"Volume :\"<<s1.Volume()<<endl;\n    Square s2(l1,b1,h1);\n    cout<<\"Volume :\"<<s2.Volume()<<endl;\n    cout<<\"Total objects: \"<<Square::objcount<<endl;\n    cout<<\"Inital Stage Count: \"<<Square::stagecount<<endl;\n    return 0;\n}",
    "Write A CPP Program to create class  Square and calculate the volume of the Square, make use of static member variable and static member function in the class Square.(Note: l=b=h)": "#include <iostream>\nusing namespace std;\nclass Square\n{\n    public:\n    static int objectCount;\n    // Constructor definition\n    Square(double l, double b, double h)\n    {\n        cout <<\"Constructor called.\"<<endl;\n        length = l;\n        breadth = b;\n        height = h;\n        // Increase every time object is created\n        objectCount++;\n    }\n    double Volume()\n    {\n        return length * breadth * height;\n    }\n    static int stage()\n    {\n        return objectCount;\n    }\n    private:\n    double length;     // Length of a box\n    double breadth;    // Breadth of a box\n    double height;     // Height of a box\n};\n\n// Initialize static member of class Box\nint Square::objectCount = 0;\n\nint main(void) \n{\n    int l,b,h;\n    cin>>l>>b>>h;\n    cout<<\"Inital Stage Count: \"<<Square::stage()<<endl;\n    Square s1(l,b,h);    // Declare box1\n    cout<<\"Volume :\"<<s1.Volume()<<endl;\n    cin>>l>>b>>h;\n    Square s2(l,b,h);    // Declare box2\n    cout<<\"Volume :\"<<s2.Volume()<<endl;\n    // Print total number of objects.\n    cout<<\"Total objects: \"<<Square::objectCount<<endl;\n    cout<<\"Final Stage Count: \"<<Square::stage()<<endl;\n    return 0;\n}",
    "Write a CPP program to overload a function to print Integer data in one and Floating-Point data in another": "#include<iostream>\nusing namespace std;\nclass function\n{\n    public:\n    void print(int x)\n    {\n        cout<<\"Integer=\"<<x<<endl;\n    }\n    void print(float x)\n    {\n        cout<<\"Floating Point=\"<<x;\n    }\n};\nint main()\n{\n    function f;\n    int x;\n    float y;\n    cin>>x>>y;\n    f.print(x);\n    f.print(y);\n    return 0;\n}",
    "Write a CPP Program to overload a function to perform sum of two integers and sum of three integers": "#include<iostream>\nusing namespace std;\nclass Sum\n{\n    public:\n    void sum(int x,int y)\n    {\n        cout<<\"Sum of two Numbers=\"<<x+y<<endl;\n    }\n    void sum(int x,int y,int z)\n    {\n        cout<<\"Sum of three Numbers=\"<<x+y+z<<endl;\n    }\n};\nint main()\n{\n    Sum s;\n    int  x,y,z;\n    cin>>x>>y;\n    s.sum(x,y);\n    cin>>x>>y>>z;\n    s.sum(x,y,z);\n    return 0;\n}",
    "Write a CPP Program to overload the first function to perform addition, second function to perform subtraction, third function to perform multiplication and the fourth function to perform division.": "#include<iostream>\nusing namespace std;\nclass Sum\n{\n    public:\n    void sum(int x,int y)\n    {\n        cout<<\"Sum of two Numbers=\"<<x+y<<endl;\n    }\n    void sub(int x,int y)\n    {\n        cout<<\"Difference of two Numbers=\"<<x-y<<endl;\n    }\n    void mul(int x,int y)\n    {\n        cout<<\"Product of two Numbers=\"<<x*y<<endl;\n    }\n    void div(int x,int y)\n    {\n        cout<<\"Division of two Numbers=\"<<x/y<<endl;\n    }\n};\nint main()\n{\n    Sum s;\n    int  x,y;\n    cin>>x>>y;\n    s.sum(x,y);\n    cin>>x>>y;\n    s.sub(x,y);\n    cin>>x>>y;\n    s.mul(x,y);\n    cin>>x>>y;\n    s.div(x,y);\n    return 0;\n}",
    "Write a CPP Program to overload a function to increment the value by 5 and another function to increment by 10.": "#include <iostream>\nusing namespace std;\nint incr(int a)\n{\n    a = a+5;\n    return a;\n}\ndouble incr(double a)\n{\n    a = a+10;\n    return a;\n}\nint main()\n{\n    int data;\n    cin>>data;\n    data = incr(data);\n    cout<<data<<endl;\n    \n    double dat;\n    cin>>dat;\n    dat = incr(dat);\n    cout<<dat;\n}",
    "Write a CPP Program to compute the total and percentage of a student by Function Overloading": "#include <iostream>\nusing namespace std;\nint compute(int m1, int m2, int m3)\n{\n    int total = m1+m2+m3;\n    return total;\n}\nfloat percentage(float avg)\n{\n    avg = avg/3;\n    return avg;\n}\nint main()\n{\n    int mk1,mk2,mk3;\n    cin>>mk1>>mk2>>mk3;\n    float tot = compute(mk1, mk2,mk3);\n    cout<<\"Total=\"<<tot<<endl;\n    float perc= percentage(tot);\n    cout<<\"Percentage=\"<<perc;\n}",
    "Write a CPP Program to overload a function to print an integer and another function to print a double": "#include <iostream>\nusing namespace std;\nvoid print(int a)\n{\n    cout<<a<<endl;\n}\nvoid print(double a)\n{\n    cout<<a;\n}\nint main()\n{\n    int data;\n    cin>>data;\n    print(data);\n    \n    double dat;\n    cin>>dat;\n    print(dat);\n}",
    "Write a CPP program to overload the (+) operator to add two objects both the objects will have the details of a Box i.e their height, length, breadth, and calculate their volume and then using the overloaded operator Add the length, breadth and height of the two objects and store into another object and calculate the volume of the third object.": "#include<iostream>\nusing namespace std;\nclass box\n{\n    public:\n    float length,breadth,height;\n    float Volume()\n    {\n        return length*breadth*height;\n    }\n    box operator+(box b4)\n    {\n        box b5;\n        b5.length=length+b4.length;\n        b5.breadth=breadth+b4.breadth;\n        b5.height=height+b4.height;\n        return b5;\n    }\n};\nint main()\n{\n    box b1,b2,b3;\n    cin>>b1.length>>b1.breadth>>b1.height;\n    cin>>b2.length>>b2.breadth>>b2.height;\n    b3=b1+b2;\n    cout<<\"Volume of Box1 : \"<<b1.Volume()<<endl;\n    cout<<\"Volume of Box2 : \"<<b2.Volume()<<endl;\n    cout<<\"Volume of Box3 : \"<<b3.Volume()<<endl;\n    return 0;\n}",
    "Write a CPP Program to overload the Operator (++) i.e. on invoking it the incrementation should happen by some random value.": "#include<iostream>\nusing namespace std;\nclass count\n{\n    public:\n    int value,value1,value2;\n    void operator ++()\n    {\n        value=value1+value2;\n        cout<<value;\n    }\n};\nint main()\n{\n    count c1;\n    cin>>c1.value1>>c1.value2;\n    ++c1;\n}",
    "Write a CPP Program to Overload the '-' operator i.e. a positive value should be turned into a negative value.": "#include<iostream>\nusing namespace std;\nclass count\n{\n    public:\n    int value,value1;\n    void operator --()\n    {\n        value1=value*2;\n        value=value-value1;\n        cout<<value;\n    }\n};\nint main()\n{\n    count c1;\n    cin>>c1.value;\n    --c1;\n    return 0;\n}",
    "Write a CPP Program to overload the operator (--) to decrement the value by 10.": "#include <iostream>\nusing namespace std;\nclass op_over\n{\n    public:\n    int data;\n    void operator --()\n    {\n        this->data = this->data - 10; //data=data-10;\n        cout<<data;\n    }\n};\nint main()\n{\n    op_over op;\n    cin>>op.data;\n    --op;\n}",
    "Write a CPP Program to negate the existing value using operator overloading": "#include <iostream>\nusing namespace std;\nclass op_over\n{\n    public:\n    int data,value;\n    void operator --()\n    {\n        value = (this->data)*2; // value = (data)*2;\n        this->data = this->data-value; // data = data - value;\n        cout<<this->data; // cout<<data;\n    }\n};\nint main()\n{\n    op_over op;\n    cin>>op.data;\n    --op;\n}",
    "Write a CPP Program to overload the operator(+) and add two objects store the result into the third object and print the content of the third object.": "#include <iostream>\nusing namespace std;\nclass add\n{\n    public:\n    int a;\n    int b;\n    add operator +(add a1)\n    {\n        add a2;\n        a2.a = a + a1.a;\n        a2.b = b + a1.b;\n        return a2;\n    }\n};\nint main()\n{\n    add ob, ob1;\n    \n    cin>>ob.a>>ob.b;\n    cin>>ob1.a>>ob1.b;\n    \n    add ob2 = ob + ob1;\n    \n    cout<<ob2.a<<\" \"<<ob2.b;\n    return 0;\n}"
}