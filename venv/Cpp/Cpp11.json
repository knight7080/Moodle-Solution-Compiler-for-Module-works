{
    "Write a CPP Program to perform insertion sort on a set of input": "void insertion(int arr[])\n{\n    int i, key, j;\n    for (i = 1; i < 5; i++) \n    {\n        key = arr[i];\n        j = i - 1;\n        /* Move elements of arr[0..i-1], that are\n          greater than key, to one position ahead\n          of their current position */\n        while (j >= 0 && arr[j] > key) \n        {\n            arr[j + 1] = arr[j];\n            j = j - 1;\n        }\n        arr[j + 1] = key;   //If no swapping had happened curr ele retains its position or put into its respective position\n    }\n}",
    "Write a CPP Program to print the sorted elements of the Array.": "void print(int arr[])\n{\n    cout<<\"After Sorting the Array: \"<<endl;\n    for (int i = 0; i < 5; i++)\n        cout<<arr[i]<<\" \";\n}",
    "Write a CPP Program to get the elements of an Array which needs to be sorted using insertion sort.": "void input(int arr[])\n{\n    for(int i=0; i<5; i++)\n        cin>>arr[i];\n}",
    "Write the printArray module of Quick Sort in CPP.": "void printArray(int array[], int size)\n{\n    int i;\n    for (i = 0; i < size; i++)\n        cout << array[i] << \" \";\n    cout<<endl;\n}",
    "Write the Partition module of Quick Sort in CPP.": "int partition(int array[], int low, int high) {\n    \n  // select the rightmost element as pivot\n  int pivot = array[high];\n  \n  // pointer for greater element\n  int i = (low - 1);\n\n  // traverse each element of the array\n  // compare them with the pivot\n  for (int j = low; j<high; j++) {\n    if (array[j]<=pivot) {\n        \n      // if element smaller than pivot is found\n      // swap it with the greater element pointed by i\n      i++;\n      \n      // swap element at i with element at j\n      swap1(&array[i], &array[j]);\n    }\n  }\n  \n  // swap pivot with the greater element at i\n  swap1(&array[i+1], &array[high]);\n  \n  // return the partition point\n  return (i + 1);\n}\n\n",
    "Write the quickSort module of Quick Sort in CPP.": "void quickSort(int array[], int low, int high)\n{\n    if (low<high) {\n      \n    // find the pivot element such that\n    // elements smaller than pivot are on left of pivot\n    // elements greater than pivot are on righ of pivot\n    int pi = partition(array, low, high);\n\n    // recursive call on the left of pivot\n    quickSort(array,low,pi-1);\n\n    // recursive call on the right of pivot\n    quickSort(array,pi+1,high);\n  }\n}",
    "Write the swap module of Quick Sort in CPP.": "void swap1(int *a, int *b)\n{\n    int t = *a;\n    *a = *b;\n    *b = t;\n}",
    "Write the mergeSort Module of Merge Sort in CPP": "void mergeSort(int arr[], int l, int r)\n{\n    if (l < r) {\n        // Same as (l+r)/2, but avoids overflow for\n        // large l and h\n        int m = l+(r-l)/2;\n        // Sort first and second halves\n        mergeSort(arr, l, m);\n        mergeSort(arr, m + 1, r);\n  \n        merge(arr, l, m, r);\n    }\n}",
    "Write the merge Module of Merge Sort in CPP": "void merge(int arr[], int l, int m, int r)\n{\n    int i, j, k;\n    int n1 = m-l+1;\n    int n2 = r - m;\n  \n    /* create temp arrays */\n    int L[n1], R[n2];\n  \n    /* Copy data to temp arrays L[] and R[] */\n    for (i = 0; i<n1 ; i++)\n        L[i] = arr[l+i];\n    for (j = 0; j<n2 ; j++)\n        R[j] = arr[m+1+j];\n  \n    /* Merge the temp arrays back into arr[l..r]*/\n    i = 0; // Initial index of first subarray\n    j = 0; // Initial index of second subarray\n    k = l; // Initial index of merged subarray\n    while (i<n1 && j<n2) {\n        if (L[i] <= R[j]) {\n            arr[k] = L[i];\n            i++;\n        }\n        else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n  \n    /* Copy the remaining elements of L[], if there\n    are any */\n    while (i<n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n  \n    /* Copy the remaining elements of R[], if there\n    are any */\n    while (j<n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}\n",
    "Write the printArray Module of Merge Sort in CPP": "void printArray(int A[], int size)\n{\n    int i;\n    for (i = 0; i<size; i++)\n        cout<<A[i]<<\" \";\n    \n    cout<<endl;\n}",
    "Write the Binary Search Module of Binary Search Algorithm in CPP.": "int BS(int a[], int n, int search)\n{\n    int beg=0, end=n, mid;\n    \n    while(beg<=end)\n    {\n        mid=(beg+end)/2;\n        if(a[mid]==search)\n        {\n            cout<<\"Element found at \"<<mid + 1<<\" position\";\n            return 1;\n            break;\n        }\n        else if(a[mid] > search)\n            end=mid-1;\n        else\n            beg=mid+1;\n    }\n    return 0;\n}",
    "Write the Greater than Module of Binary Search in CPP": "int GreaterThan(int a[], int mid, int search)\n{\n    if(a[mid] > search)\n    {\n        return 1;\n    }\n    else\n    {\n        return 0;\n    }\n}",
    "Write the Element found module of Binary Search in CPP.": "int ElementFound(int a[], int mid, int search){\n    if(a[mid]==search)\n    {\n        cout<<\"Element found at \"<<mid + 1<<\" position\";\n        return 1;\n    }\n    else\n    {\n        return 0;\n    }\n}"
}