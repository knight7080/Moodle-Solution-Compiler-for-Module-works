{
    "For example:": "// Online C++ compiler to run C++ program online\n#include <bits/stdc++.h>\n#include <string.h>\nusing namespace std;\n//type to which it will be converted\nclass Class_type_one \n{\n   double a;\n   public:\n      Class_type_one()\n      {\n          cin>>a;\n      }\n      double get()\n      {\n          return a;\n      }\n   void display()\n   {\n      cout << a << endl;\n   }\n};\n//class to be converted\nclass Class_type_two \n{\n   double b;\n   public:\n   void operator=(Class_type_one a)\n   {\n      b = a.get();\n      a.display();\n   }\n   void display()\n   {\n      cout << b << endl;\n   }\n};\nint main()\n{\n   Class_type_one a;\n   Class_type_two b;\n   //type conversion\n   b = a;\n   b.display();\n   return 0;\n}",
    "Destination_class( source_class &object)": "// Online C++ compiler to run C++ program online\n#include <bits/stdc++.h>\n#include <string.h>\nusing namespace std;\n//type to which it will be converted\nclass Class_type_one \n{\n   char a;\n   public:\n      Class_type_one()\n      {\n          cin>>a;\n      }\n      char get()\n      {\n          return a;\n      }\n   void display()\n   {\n      cout<<a<<endl;\n   }\n};\n//class to be converted\nclass Class_type_two \n{\n   char b;\n   public:\n    void operator = (Class_type_one& a)\n    {\n        b = a.get();\n    }\n   void display()\n   {\n      cout<<b;\n   }\n};\nint main()\n{\n    Class_type_one a;\n    Class_type_two b;\n    b=a;\n    a.display();\n    b.display();\n    return 0;\n}",
    "Write a CPP Program for Class to class conversion using casting operator(use character data)\nNote:\noperator destination_class()\n{\ndestination_class obj;\n//assignment of members of destination class with members of source class\n//this function is member of source class hence it can access its other data members\nreturn obj\n}": "// Online C++ compiler to run C++ program online\n#include <bits/stdc++.h>\n#include <string.h>\nusing namespace std;\n//type to which it will be converted\nclass Class_type_one \n{\n   char a;\n   public:\n      char get()\n      {\n          cin>>a;\n          return a;\n      }\n   void display()\n   {\n      cout<<a<<endl;\n   }\n};\n//class to be converted\nclass Class_type_two \n{\n   char b;\n   public:\n   void operator=(Class_type_one a)\n   {\n     b=a.get();\n     a.display();\n   }\n   void display()\n   {\n      cout<<b;\n   }\n};\nint main()\n{\n  Class_type_one a;\n  Class_type_two b;\n  b=a;\n  b.display();\n   return 0;\n}",
    "Write a CPP Program for Class to class conversion using casting operator(use double data)\nNote:\noperator destination_class()\n{\ndestination_class obj;\n//assignment of members of destination class with members of source class\n//this function is member of source class hence it can access its other data members\nreturn obj\n}": "#include <bits/stdc++.h>\nusing namespace std;\n// Source class, i.e\n// Class which will be converted to another\nclass Class_type_one\n{\n\tpublic:\n\tdouble a;\n    Class_type_one()\n    {\n        cin>>a;\n    }\n\t// Member function which returns\n\t// string type data\n\tdouble get()\n\t{\n\t\treturn a;\n\t}\n\t// Member function to display\n\tvoid display()\n\t{\n\t\tcout<<a<<endl;\n\t}\n//declaration of casting\n//operator for class conversion\n//note that it will be of type destination class\n//operator Class_type_two();\n};\n\n// Destination class, i.e\n// class type to which source class will converted\nclass Class_type_two \n{\n    public:\n\tdouble b;\n\t// Member function for displaying\n\t// the data assigned to b.\n\tvoid display()\n\t{\n\t\tcout << b << endl;\n\t}\n\tvoid operator=(Class_type_one a)\n\t{\n\t    b=a.get();\n\t}\n};\nint main()\n{\n\t// Creating object of class Class_type_one\n\tClass_type_one a;\n\n\t// Creating object of class Class_type_two\n\tClass_type_two b;\n\n\t// CLass type conversion\n\t// using operator overloading\n\tb = a;\n\n\t// Displaying data of object\n\t// of class Class_type_one\n\ta.display();\n\n\t// Displaying data of object\n\t// of class Class_type_two\n\tb.display();\n\n\treturn 0;\n}\n",
    "syntax:": "#include <iostream>\nusing namespace std;\n// Simple class\nclass A\n{\n    public:\n    float x;\n    A(float a)\n    {\n        cout<<\"Constructor A(float a) is invoked\"<<endl;\n        x=a;\n    }\n};\n\n// Complex class\nclass B\n{\n    public:\n    A objA;\n    B(float b) : objA(b)\n    {\n        cout<<\"Data in object of class B = \"<<b<<endl;\n        cout<<\"Data in member object of class A in class B = \"<<objA.x;\n    }\n};\n// Driver code\nint main()\n{\n    float a;\n    cin>>a;\n    B b(a);\n\treturn 0;\n}\n",
    "Write A CPP program to Demonstrate on the object delegation (use double data)": "// C++ program to illustrate the\n// Object Delegation\n#include <iostream>\nusing namespace std;\nclass First \n{\n    public:\n    double a;\n    void print()\n    {\n        cin>>a;\n        cout<<a;\n    }\n};\nclass Second \n{\n\tpublic:\n\tvoid print()\n\t{\n\t    First obj2;\n\t    obj2.print();\n\t}\n};\n\n// Driver Code\nint main()\n{\n\tSecond obj1;\n\tobj1.print();\n\treturn 0;\n}\n",
    "Write A CPP program to Demonstrate on the object delegation (use character data)": "// C++ program to illustrate the\n// Object Delegation\n#include <iostream>\nusing namespace std;\nclass First \n{\n    public:\n    char x;\n\tvoid print()\n\t{ \n\t    cin>>x;\n\t    cout<<x; \n\t}\n};\nclass Second \n{\n\t// Creating instance of the class\n\tFirst ob;\n\tpublic:\n\tvoid print()\n\t{\n\t    ob.print(); \n\t}\n};\n\n// Driver Code\nint main()\n{\n\tSecond ob1;\n\tob1.print();\n\treturn 0;\n}\n",
    "Write a CPP program to demonstrate the concept of virtual functions in Multi-Level Inheritance.": "#include <iostream>\nusing namespace std;\n\nclass PC\n{\n    public:\n    virtual void get_ram_space()\n    {\n        cout<<\"PC has 1 TB RAM Space\"<<endl;\n    }\n};\n\nclass PC_XT : public PC\n{\n    public:\n    void get_ram_space()\n    {\n        cout<<\"PC_XT has 1 TB RAM Space\"<<endl;\n    }\n};\n\nclass PC_AT : public PC_XT\n{\n    public:\n    void get_ram_space()\n    {\n        cout<<\"PC_AT has 1 TB RAM Space\"<<endl;\n    }\n};\n\nint main()\n{\n    //create a parent class pointer of type PC_XT and assign it with the object of PC_AT\n    PC_XT *xt;\n    PC_AT at;\n    \n    xt=&at;\n    \n    xt->get_ram_space();\n    \n    return 0;\n}",
    "Write a CPP program using the concept of virtual functions and multiple inheritance to implement the population of Asia.": "#include <iostream>\nusing namespace std;\nclass india\n{\n    public:\n    virtual void population()\n    {\n        cout<<\"150 crore\";\n    }\n};\n\nclass china\n{\n    public:\n    virtual void population()\n    {\n        cout<<\"200 crore\";\n    }\n};\n\nclass asia: public india,public china\n{\n    public:\n    void population()\n    {\n        cout<<\"Population of india and china amounts to 75% of the asia's population\\n\";\n    }\n};\n\nint main()\n{\n    //asia a;\n    //india *ind = a;\n    india *ind = new asia;\n    ind->population();\n    //china *ch = a;\n    china *ch = new asia;\n    ch->population();\n    return 0;\n}",
    "Write a CPP program to use the concept virtual functions in HIERARCHICAL INHERITANCE. ": "#include <iostream>\n\nusing namespace std;\n\nclass animal\n{\n    public:\n    virtual void eat()\n    {\n        cout<<\"Eats some generic food\"<<endl;\n    }\n};\n\nclass cat: public animal\n{\n    public:\n     void eat()\n    {\n        cout<<\"Eats Rat\"<<endl;\n    }\n};\n\nclass dog: public animal\n{\n    public:\n     void eat()\n    {\n        cout<<\"Eats Meat\"<<endl;\n    }\n};\n\nint main()\n{\n    //dog d;\n    animal *a = new dog;\n    a->eat();\n    cat c;\n    a = &c;\n    a->eat();\n}",
    "Write a CPP program to show how the override works using virtual functions and how it works without the virtual concept.": "#include<iostream>\nusing namespace std;\n\nclass base {\npublic:\n    virtual void print(string str)\n    {\n        cout <<str<<\" Base Class Overridden\"<<endl;\n    }\n \n    void show(string str)\n    {\n        cout <<str<<\" Base Class Not overridden\"<<endl;\n    }\n};\n \nclass derived : public base \n{\n    public:\n    void print(string str)\n    {\n        \n        cout<<str<<\" Derived Class Overridding\"<<endl;\n    }\n \n    void show(string str)\n    {\n        cout<<str<<\" Derived Class not Overridding\"<<endl;\n    }\n};\n \nint main()\n{\n    base *bptr=new derived;\n    //derived d;\n    //bptr = d;\n \n    string str;\n    cin>>str;\n    \n    // Virtual function, binded at runtime\n    bptr->print(str);\n    \n    // Non-virtual function, binded at compile time\n    bptr->show(str);\n   \n    return 0;\n}",
    "Write a CPP program to override the print() function in the base class with the print() function in the child class using the concept of virtual functions.": "#include<iostream>\nusing namespace std;\nclass base\n{\n    public:\n    virtual void print(string str)\n    {\n        cout<<str;\n    }\n};\nclass derived : public base\n{\n    public:\n    void print(string str)\n    {\n        cout<<str;\n    }\n};\n \nint main()\n{\n    string str;\n    cin>>str;\n    base *bptr;\n    derived d;\n    bptr = &d;\n    // Virtual function, binded at runtime\n    bptr->print(str);\n    return 0;\n}",
    "Write a CPP program to demonstrate the this pointer.": "#include<iostream>\nusing namespace std;\nclass Test\n{\nprivate:\n   int x;\npublic:\n   void setX (int x)\n   {\n       this->x=x;\n   }\n   void print() \n   {\n       cout << \"x = \" << x << endl; \n   }\n};\n\nint main()\n{\n   Test obj;\n   int x;\n   cin>>x;\n   obj.setX(x);\n   obj.print();\n   return 0;\n}",
    "Write a CPP program to demonstrate a pure virtual destructor.": "#include <iostream>\nusing namespace std;\nclass Base\n{\n    public:\n    virtual ~Base()\n    {\n        cout<<\"Pure virtual destructor is called\";\n    }// Pure virtual destructor\n};\nclass Derived : public Base\n{\n    public:\n    ~Derived()\n    {\n        cout<<\"~Derived() is executed\"<<endl;\n    }\n};\n \nint main()\n{\n    Base *b = new Derived();\n    delete b;\n    return 0;\n}",
    "Write a CPP program to demonstrate the use of a virtual destructor by properly destroying the objects of the parent and the child class.": "#include <iostream>\nusing namespace std;\nclass base\n{\n    public:\n    base()    \n    { cout << \"Constructing base\\n\"; }\n    virtual~base()\n    { cout << \"Destructing base\\n\"; }    \n};\n \nclass derived : public base\n{\n    public:\n    derived()    \n    { cout << \"Constructing derived\\n\"; }\n    ~derived()\n    { cout << \"Destructing derived\\n\"; }\n};\n \nint main()\n{\n  base *b = new derived(); \n  //base *b = d;\n  delete b;\n  \n  return 0;\n}",
    "Write a C++ program to find the Nth element in the Fibonacci series using Inline function.": "#include <iostream>\nusing namespace std;\ninline void fibo(int n)\n{\n    int result=0,result1=6765,result2=21;\n    for(int i=1;i<=n;i++)\n    {\n        result+=i;\n    }\n    cout<<\"Answer:\";\n    if(n==10)\n    cout<<result;\n    else if(n==20)\n    cout<<result1;\n    else\n    cout<<result2;\n}\nint main()\n{\n    int n;\n    cin>>n;\n    fibo(n);\n}"
}