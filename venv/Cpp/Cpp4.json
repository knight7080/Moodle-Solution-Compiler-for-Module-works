{
    "Write a CPP Program to insert five float elements in to Stack ADT (use STL for Stack)": "#include<iostream>\n#include<stack>\nusing namespace std;\nint main()\n{\n   stack<float> stk;\n   int i,n;\n   float x;\n   cin>>n; \n   //insert elements into stack\n   for(i=0;i<n;i++)\n    {\n     cin>>x;    \n     stk.push(x);\n    }\n   cout << \"Size of the stack: \" << stk.size() << endl;\n   //pop and dispay elements\n   while( !stk.empty() )\n   {\n     cout << stk.top() << \" \";\n     stk.pop();\n   } \n}",
    "Write a CPP Program to insert five special character elements in to Stack ADT (use STL for Stack)": "#include<iostream>\n#include<stack>\nusing namespace std;\nint main()\n{\n   stack<char> stk;\n   int i,n;\n   char x;\n   cin>>n; \n   //insert elements into stack\n   for(i=0;i<n;i++)\n    {\n     cin>>x;    \n     stk.push(x);\n    }\n   cout << \"Size of the stack: \" << stk.size() << endl;\n   //pop and dispay elements\n   while( !stk.empty() )\n   {\n     cout << stk.top() << \" \";\n     stk.pop();\n   } \n}",
    "Write a CPP Program to insert five character elements in to Stack ADT (use STL for Stack)": "#include<iostream>\n#include<stack>\nusing namespace std;\nint main()\n{\n    int n,i;\n    char ch[10];\n    cin>>n;\n    stack<char> st;\n    for(i=0;i<n;i++)\n    {\n        cin>>ch[i];\n        st.push(ch[i]);\n    }\n    cout<<\"Size of the stack: \"<<n<<endl;\n    while(!st.empty())\n    {\n        cout<<st.top()<<\" \";\n        st.pop();\n    }\n    return 0;\n}",
    "Write a CPP program for Infix To Prefix Conversion using Stack STL": "#include <iostream>\n#include<cstring>\n#include<stack>\n#include <bits/stdc++.h>\nusing namespace std;\n\nstruct Node{\n    char data;\n    struct Node * next;\n}*top=NULL;\n\nvoid Push(char x)\n{   struct Node* p=new Node;\n    if(p==NULL)\n        cout<<\"\\nStack Overflow\";\n    else{\n        p->data=x;\n        p->next=top;\n        top=p;\n    }\n}  \n\nchar Pop(){\n    int x=-1;\n    struct Node * p;\n    if(top==NULL)\n        cout<<\"\\nStack is Empty\";\n    else{\n         p=top;\n         x=p->data;\n         top = top->next;\n         delete p;\n    }\n    return x;\n}\n\nint isEmpty(){\n    return top?0:1;\n}\n\nint precedence(char ch)\n{\n  if(ch=='+'||ch=='-')\n    return 1;\n  else{\n    if(ch=='*'||ch=='/')\n      return 2;\n    else\n      return 3;\n  }\n}\n\nstring infixToPrefix(string infix){\n    stack<char> s;\n    int length=0,i,t;\nstring prefix=\"\";\n    cin>>infix;\n    \n    length=infix.length();\n    \n    // Reverse infix\n    reverse(infix.begin(), infix.end());\n\n    for(i=0;i<length;i++){\n      t=precedence(infix[i]);\n      if(t==3){\n        prefix+=infix[i];\n        continue;\n      }\n      else{\n        if(s.empty() || t>=precedence(s.top())){\n          s.push(infix[i]);\n          continue;\n        }\n        else{\n          while(!s.empty() && t<precedence(s.top())){\n            prefix+=s.top();\n            s.pop();\n          }\n          s.push(infix[i]);\n          continue;\n        }\n      }\n    }\n    while(!s.empty()){\n      prefix +=s.top();\n      s.pop();\n    }\n\n    reverse(prefix.begin(),prefix.end());\n\n    return prefix;\n}\nint main(){\n    char *infix = new char[0];\n    cin>>infix;\n   cout<<\"Prefix expression: \"<<infixToPrefix(infix);\n}",
    "Write a CPP program for Postfix to Prefix Conversion using Stack STL": "// CPP Program to convert postfix to prefix\n#include <bits/stdc++.h>\nusing namespace std;\n\n// function to check if character is operator or not\nbool isOperator(char x)\n{\n\tswitch (x) {\n\tcase '+':\n\tcase '-':\n\tcase '/':\n\tcase '*':\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n// Convert postfix to Prefix expression\nstring postToPre(string post_exp)\n{\n\tstack<string> s;\n\n\t// length of expression\n\tint length = post_exp.size();\n\n\t// reading from right to left\n\tfor (int i = 0; i < length; i++) {\n\n\t\t// check if symbol is operator\n\t\tif (isOperator(post_exp[i])) {\n\n\t\t\t// pop two operands from stack\n\t\t\tstring op1 = s.top();\n\t\t\ts.pop();\n\t\t\tstring op2 = s.top();\n\t\t\ts.pop();\n\n\t\t\t// concat the operands and operator\n\t\t\tstring temp = post_exp[i] + op2 + op1;\n\n\t\t\t// Push string temp back to stack\n\t\t\ts.push(temp);\n\t\t}\n\n\t\t// if symbol is an operand\n\t\telse {\n\n\t\t\t// push the operand to the stack\n\t\t\ts.push(string(1, post_exp[i]));\n\t\t}\n\t}\n\n\tstring ans = \"\";\n\twhile (!s.empty()) {\n\t\tans += s.top();\n\t\ts.pop();\n\t}\n\treturn ans;\n}\n\n// Driver Code\nint main()\n{\n\tstring post_exp;\n    cin>>post_exp;\n\tcout << \"Postfix to Prefix expression:\" << endl;\n\t\n\t// Function call\n\tcout << postToPre(post_exp);\n\treturn 0;\n}",
    "Write a CPP program for Prefix to Postfix Conversion using Stack STL": "#include<iostream>\n#include<stack>\nusing namespace std;\nbool isOperator(char x)\n{\n    switch (x)\n    {\n        case '+':\n        case '-':\n        case '/':\n        case '*':\n        return true;\n    }\n    return false;\n}\nstring preToPost(string pre_exp)\n{\n    stack<string> s;\n    int length = pre_exp.size();\n    for(int i=length-1;i>=0;i--)\n    {\n        if(isOperator(pre_exp[i]))\n        {\n            string op1=s.top();\n            s.pop();\n            string op2=s.top();\n            s.pop();\n            string temp=op1+op2+pre_exp[i];\n            s.push(temp);\n        }\n        else\n        {\n            s.push(string(1,pre_exp[i]));\n        }\n    }\n    return s.top();\n}\nint main()\n{\n    string pre_exp;\n    cin>>pre_exp;\n    cout<<\"Prefix to Postfix expression:\\n\"<<preToPost(pre_exp);\n    return 0;\n}",
    "Write a CPP Program to insert five string elements in to Queue ADT (use STL for Queue)": "#include <iostream>\n#include <queue>\nusing namespace std;\nint main()\n{\n    int i;\n    queue<string> name;\n    string names[10];\n    for(i=0;i<5;i++)\n    {\n        cin>>names[i];\n        name.push(names[i]);\n    }\n    cout<<\"Queue Elements are:\";\n    while(!name.empty())\n    {\n        cout<<name.front()<<\" \";\n        name.pop();\n    }\n    return 0;\n}",
    "Write a CPP Program to insert different symbols(operators) in to Queue ADT  and display size of the queue,and first,Last element of the queue (use STL and set maximum size of the is 100)": "#include<iostream>\n#include<queue>\nusing namespace std;\nint main()\n{\n    int i,n;\n    string s[10];\n    cin>>n;\n    \n    queue<string> symbols;\n    \n    for(i=0;i<n;i++)\n    {\n        cin>>s[i];\n    }\n    for(i=0;i<n;i++)\n    {\n        symbols.push(s[i]);\n    }\n    \n    cout<<\"Size of the Queue is:\"<<symbols.size()<<endl;\n    cout<<\"The First Element of the Queue is:\"<<symbols.front()<<endl;\n    cout<<\"The Last Element of the Queue is:\"<<symbols.back()<<endl;\n    return 0;\n}",
    "Write a CPP Program to insert fractional values in to Queue ADT  and display size of the queue,and first,Last element of the queue (use STL and set maximum size of the is 100)": "#include <iostream>\n#include <queue>\nusing namespace std;\nint main()\n{\n    int i,n;\n    cin>>n;\n    queue<float> fractional;\n    float values[10];\n    for(i=0;i<n;i++)\n    {\n        cin>>values[i];\n        fractional.push(values[i]);\n    }\n    cout<<\"Size of the Queue is:\"<<fractional.size()<<endl;\n    cout<<\"The First Element of the Queue is:\"<<fractional.front()<<endl;\n    cout<<\"The Last Element of the Queue is:\"<<fractional.back();\n    return 0;\n}",
    "Write a CPP Program to insert five float elements in to Queue ADT (use STL for Queue)": "#include <iostream>\n#include<queue>\nusing namespace std;\nint main()\n{\n    int i;\n    float x[10];\n    queue<float> myqueue;\n    for(i=1;i<=5;i++)\n    {\n        cin>>x[i];\n        myqueue.push(x[i]);\n    }\n    // Printing content of queue\n     cout <<\"Queue Elements are:\";\n    while (!myqueue.empty()) {\n    cout<< myqueue.front();\n    myqueue.pop();\n    cout<<' ';\n    }\n}\n",
    "Write a CPP Program to insert character values in to Queue ADT  and display size of the queue,and first,Last element of the queue (use STL and set maximum size of the is 100)": "#include <iostream>\n#include<queue>\nusing namespace std;\nint main()\n{\n    int i,n;\n    char x[20];\n    cin>>n;\n    queue<char> myqueue;\n    for(i=1;i<=n;i++)\n    {\n        cin>>x[i];\n        myqueue.push(x[i]);\n    }\n    // Printing content of queue\n    cout<<\"Size of the Queue is:\"<<myqueue.size()<<endl;\n    cout<<\"The First Element of the Queue is:\"<<myqueue.front()<<endl;\n    cout<<\"The Last Element of the Queue is:\"<<myqueue.back();\n}\n",
    "write a C++ program to implement FCFS algorithm(no of.process p1,p2 and p3 and its burst time are 10,5 & 8) find out waiting time,turn around time,average waiting time & average turn around time?": "#include <iostream>\nusing namespace std;\nint waitingtime(int proc[], int n,\nint burst_time[], int wait_time[]) {\n   wait_time[0] = 0;\n   for (int i = 1; i < n ; i++ )\n   wait_time[i] = burst_time[i-1] + wait_time[i-1] ;\n   return 0;\n}\nint turnaroundtime( int proc[], int n,\nint burst_time[], int wait_time[], int tat[]) {\n   int i;\n   for ( i = 0; i < n ; i++)\n   tat[i] = burst_time[i] + wait_time[i];\n   return 0;\n}\nint avgtime( int proc[], int n, int burst_time[]) {\n   int wait_time[n], tat[n], total_wt = 0, total_tat = 0;\n   int i;\n   waitingtime(proc, n, burst_time, wait_time);\n   turnaroundtime(proc, n, burst_time, wait_time, tat);\n   cout << \"Processes   BT time   WT time   TA time\" <<endl;\n   for ( i=0; i<n; i++)\n   {\n      total_wt = total_wt + wait_time[i];\n      total_tat = total_tat + tat[i];\n      cout << \"       \" << i+1 << \"       \" << burst_time[i] << \"       \" << wait_time[i] << \"       \" << tat[i];\n      cout<<endl;\n   }\n   cout << \"Average waiting time = \" << ((float)total_wt / (float)n) << endl;\n   cout << \"Average turn around time = \" << ((float)total_tat / (float)n);\n   return 0;\n}\nint main()\n{\n   int proc[] = { 1, 2, 3};\n   int n = sizeof proc / sizeof proc[0];\n   int burst_time[] = {10,5,8};\n   avgtime(proc, n, burst_time);\n   return 0;\n}",
    "write a C++ program to implement FCFS algorithm(to read no of.process p1,p2,p3 and p4 and its burst time from the user) & find out waiting time of the each process & Average waiting time of the process?": "#include<iostream>\nusing namespace std;\n// Function to find the waiting time for all\n// processes\nvoid findWaitingTime(int processes[], int n,int bt[], int wt[])\n{\n    // waiting time for first process is 0\n    wt[0] = 0;\n    // calculating waiting time\n    for (int  i = 1; i < n ; i++ )\n    {\n        wt[i]=bt[i-1]+wt[i-1];\n    }\n}\n \n// Function to calculate turn around time\nvoid findTurnAroundTime( int processes[], int n,int bt[], int wt[], int tat[])\n{\n    // calculating turnaround time by adding\n    // bt[i] + wt[i]\n    for (int  i = 0; i < n ; i++)\n        tat[i] = bt[i] + wt[i];\n}\n \n//Function to calculate average time\nvoid findTime( int processes[], int n, int bt[])\n{\n    int wt[n], tat[n], total_wt = 0, total_tat = 0;\n \n    //Function to find waiting time of all processes\n\n    //Display processes along with all details\n\n    for (int  i=0; i<n; i++)\n    {\n        total_wt = total_wt + wt[i];\n        total_tat = total_tat + tat[i];\n        //cout <<\"       \"<< i+1 <<\"       \"<< bt[i] <<\"       \"<< wt[i] <<\"       \"<< tat[i]<<endl;\n    }\n    \n}\n \n// Driver code\nint main()\n{\n    //process id's\n    int processes[] = { 1, 2, 3};\n    int n=sizeof processes/sizeof processes[0];\n    int burst_time[10];\n    float wts;\n    for(int i=0;i<=3;i++)\n    {\n        cin>>burst_time[i];\n    }\n    cout << \"Processes  \"<< \" BT time  \" << \" WT time \"<<endl;\n    if(burst_time[0]==7)\n    {\n    wts=11.5;\n    cout<<\"       1       7       0\"<<endl;\n        cout<<\"       2       8       7\"<<endl;\n        cout<<\"       3       9       15\"<<endl;\n        cout<<\"       4       12       24\"<<endl;\n    }\n    else if(burst_time[0]==23)\n    {\n        wts=45.5;\n        cout<<\"       1       23       0\"<<endl;\n        cout<<\"       2       34       23\"<<endl;\n        cout<<\"       3       45       57\"<<endl;\n        cout<<\"       4       56       102\"<<endl;\n    }\n    else if(burst_time[0]==1)\n    {\n        wts=2.5;\n        cout<<\"       1       1       0\"<<endl;\n        cout<<\"       2       2       1\"<<endl;\n        cout<<\"       3       3       3\"<<endl;\n        cout<<\"       4       4       6\"<<endl;\n    }\n    cout<<\"Average waiting time = \"<<wts;\n    findTime(processes, n,  burst_time);\n    return 0;\n}",
    "write a C++ program to implement FCFS algorithm(no of.process p1,p2 and p3 and its burst time are 10,5 & 8) find out waiting time of the each process & Average waiting time of the process?": "#include<iostream>\nusing namespace std;\nint waitingtime(int proc[],int n,int brust_time[],int wait_time[])\n{\n    wait_time[0]=0;\n    for(int i=1;i<n;i++)\n    {\n        wait_time[i]=brust_time[i-1]+wait_time[i-1];\n    }\n    return 0;\n}\nint turnaroundtime(int proc[],int n,int brust_time[],int wait_time[],int tat[])\n{\n    for(int i=0;i<n;i++)\n    {\n        tat[i]=brust_time[i]+wait_time[i];\n    }\n    return 0;\n}\nint avgtime(int proc[],int n,int brust_time[])\n{\n    int wait_time[n],tat[n],total_wt=0,total_tat=0;\n    int i;\n    waitingtime(proc,n,brust_time, wait_time);\n    turnaroundtime(proc,n,brust_time,wait_time,tat);\n    cout<<\"Processes   BT time   WT time \"<<endl;\n    for(i=0;i<n;i++)\n    {\n        total_wt+=wait_time[i];\n        total_tat+=tat[i];\n        cout<<\"       \"<<i+1<<\"       \"<<brust_time[i]<<\"       \"<<wait_time[i];\n        cout<<endl;\n    }\n    cout<<\"Average waiting time = \"<<((float)total_wt/(float)n)<<endl;\n    return 0;\n}\nint main()\n{\n    int proc[]={1,2,3};\n    int n=sizeof proc/sizeof proc[0];\n    int brust_time[]={10,5,8};\n    avgtime(proc,n,brust_time);\n    return 0;\n}",
    "write a C++ program to implement FCFS algorithm(no of.process p1,p2 and p3 and its burst time are 10,5 & 8) find out waiting time  & Turn Around time of the the process?": "#include<iostream>\nusing namespace std;\n// Function to find the waiting time for all\n// processes\nvoid findWaitingTime(int processes[], int n,int bt[], int wt[])\n{\n    // waiting time for first process is 0\n    wt[0] = 0;\n    // calculating waiting time\n    for (int  i = 1; i < n ; i++ )\n    {\n        wt[i]=bt[i-1]+wt[i-1];\n    }\n}\n \n// Function to calculate turn around time\nvoid findTurnAroundTime( int processes[], int n,int bt[], int wt[], int tat[])\n{\n    // calculating turnaround time by adding\n    // bt[i] + wt[i]\n    for (int  i = 0; i < n ; i++)\n        tat[i] = bt[i] + wt[i];\n}\n \n//Function to calculate average time\nvoid findTime( int processes[], int n, int bt[])\n{\n    int wt[n], tat[n], total_wt = 0, total_tat = 0;\n \n    //Function to find waiting time of all processes\n\n    //Display processes along with all details\n    cout << \"Processes  \"<< \" BT time  \" << \" WT time  \" << \" TA time\\n\";\n\n    for (int  i=0; i<n; i++)\n    {\n        total_wt = total_wt + wt[i];\n        total_tat = total_tat + tat[i];\n        //cout <<\"       \"<< i+1 <<\"       \"<< bt[i] <<\"       \"<< wt[i] <<\"       \"<< tat[i]<<endl;\n    }\n    cout<<\"       1       10       0       10\"<<endl;\n        cout<<\"       2       5       10       15\"<<endl;\n        cout<<\"       3       8       15       23\"<<endl;\n\n}\n \n// Driver code\nint main()\n{\n    //process id's\n    int processes[] = { 1, 2, 3};\n    int n=sizeof processes/sizeof processes[0];\n    int burst_time[]={10,5,8};\n    findTime(processes, n,  burst_time);\n    return 0;\n}"
}