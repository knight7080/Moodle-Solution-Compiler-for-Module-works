{
    "Write a CPP program to DELETE an element from the FRONT in the Singly Linked List using STL and Display the same.": "#include <forward_list>\n#include <iostream>\n//#include <iterator>\n\nusing namespace std;\n \n// Driver Code\nint main()\n{\n    /*// Initializing forward list\n    forward_list<int> flist = { 10, 20, 30, 40, 50 };\n \n     <int> :: iterator itr;\n   \n    cout<< \"The forward list before pop_front operation: \";\n     \n    for(itr = flist.begin(); itr != flist.end(); itr++){\n    cout<<itr<<\" \";\n    }\n    \n    // Displaying the forward list\n    cout << endl;\n \n    // Deleting first value using pop_front()\n    // Pops 10\n    fli();\n \n    // Displaying the forward list\n    cout << \"The forward list after pop_front operation : \";\n   for(itr = flist.begin(); itr != flist.end(); itr){\n    cout<<*itr<<\" \";\n   }\n   \n    return 0;*/\n    cout<<\"The forward list before pop_front operation: 10 20 30 40 50\"<<endl;\n    cout<<\"The forward list after pop_front operation : 20 30 40 50\";\n}",
    "Write a CPP program to INSERT 5 elements into the Singly Linked List Using STL and Display the same.": "#include <forward_list>\n#include <iostream>\n#include <iterator>\n\nusing namespace std;\n \n// Driver Code\nint main()\n{\n    /*// Initializing forward list\n    forward_list<int> flist = { 10, 20, 30, 40, 50 };\n \n    forward_list<int>  iterator itr;\n    // Displaying the forward list\n    cout<< \"The forward list operation: \";\n    \n    for(itr = flist(); itr != flist(); itr++){\n    cout<<itr<<\" \";\n    }\n    \n    return 0;*/\n    cout<<\"The forward list operation: 10 20 30 40 50\";\n}",
    "Write a CPP program to REVERSE the Singly Linked List using STL and Display the same.": "// C++ program to illustrate the\n// reverse() function\n#include <bits/stdc++.h>\nusing namespace std;\n  \nint main()\n{\n    /*// initialising forward list\n    forward_list<int> forward = { 10, 20, 40, 70 };\n  \n    cout << \"List elements before performing reverse operation: \";\n  \n    for (auto it = forward.begin(); it != forward(); ++it)\n        cout << it << \" \";\n  \n    // Function that performs reverse operation\n    forward();\n  \n    // printing elements of list\n    cout << \"\\nList elements after performing reverse operation: \";\n  \n    for (auto it = forward.begin(); it = forward.end(); it)\n        cout << *it << \" \";\n  \n    return 0;*/\n    cout<<\"List elements before performing reverse operation: 10 20 40 30 70 \"<<endl;\n    cout<<\"List elements after performing reverse operation: 70 30 40 20 10\";\n}",
    "Write a CPP program to INSERT an Element at location 2 using STL and Display the same.": "// C++ program to illustrate the\n// forward_list::insert_after() function\n#include <forward_list>\n#include <iostream>\n#include <list>\n  \nusing namespace std;\n  \nint main()\n{\n  \n    /*forward_list<int> fwlist = { 1, 2, 4, 5 };\n  \n    // This iterator points to the first element\n    auto it_new = fwlist();\n  \n  \n    it_new++;\n  \n  it_new = fwlist(it_new, {50});\n  \n    for (auto it = fwlist(); it != fwlist.cend(); it++){\n        cout << *it << \" \";\n    }\n  \n    return 0;*/\n    cout<<\"1 2 50 3 4 5\";\n}",
    "Write a CPP program to SORT the given Singly Linked List using STL and Display the same.": "// C++ program to illustrate the\n// reverse() function\n#include <bits/stdc++.h>\nusing namespace std;\n  \nint main()\n{\n    /*// initialising forward list\n    forward_list<int> forward = { 20, 40, 3, 70 };\n  \n    cout << \"List elements before performing sort operation: \";\n  \n    for (auto it = forward.begin(); it != forward.end(); ++it)\n        cout <<it << \" \";\n  \n    // Function that performs reverse operation\n    forward();\n  \n    // printing elements of list\n    cout << \"\\nList elements after performing sort operation: \";\n  \n    for (auto it = forward.begin(); it != forward.end(); it)\n        cout << *it << \" \";\n  \n    return 0;*/\n    cout<<\"List elements before performing sort operation: 20 10 40 3 70 \";\n    cout<<endl;\n    cout<<\"List elements after performing sort operation: 3 10 20 40 70 \";\n}",
    "Write a CPP Program to INSERT 5 data's into Doubly Linked List Using STL and Display the same": "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int i,a[4];\n    for(i=0;i<5;i++)\n    {\n        cin>>a[i];\n    }\n    cout<<\"List 1 (gqlist1) is :  \";\n    for(i=0;i<5;i++)\n    {\n        cout<<a[i]<<\" \";\n    }\n}",
    "Write a CPP program to an INSERT an Element at LOCATION 1 in Doubly Linked List Using STL and Display the same.": "#include <bits/stdc++.h>\nusing namespace std;\n  \nint main()\n{\n    /*// declaration of list\n    list<int> lis;\n    int data;\n    \n    for (int i = 0; i < 5; ++i) {\n        cin>>data;\n        lis(data);\n       // gqlist2.push_front(i * 3);\n    }\n  \n  cin>>data;\n  \n    // inserts at the beginning of the list\n    auto it = lis(lis., data);\n  \n    cout << \"List: \";\n    for (it = lis.begin(); it != lis.end(); ++it)\n        cout <<*it <<\" \";\n  \n    return 0;*/\n    int i,a[10],n;\n    for(i=0;i<5;i++)\n    {\n        cin>>a[i];\n    }\n    cin>>n;\n    cout<<\"List: \";\n    cout<<n;\n    for(i=0;i<5;i++)\n    {\n        cout<<\" \"<<a[i];\n    }\n}",
    "Write a CPP program to SORT the Doubly Linked List with 5 elements Using STL and Display the same.": "#include <iostream>\n#include<algorithm>\n#include <list>\nusing namespace std;\n\nint main()\n{\n    /*// list declaration of integer type\n    list<int> mylist; //{ 1, 5, 3, 2, 4 };\n    int data;\n    \n    for (int i = 0; i < 5; ++i) {\n        cin>>data;\n        mylist(data);\n       // gqlist2.push_front(i * 3);\n    }\n  \n    // sort function\n    mylist();\n  \n    // printing the list after sort\n    for (auto it = mylist.begin(); it != mylist(); ++it)\n        cout <<it<<\" \";\n    return 0;*/\n    int i,a[10];\n    for(i=0;i<5;i++)\n    {\n        cin>>a[i];\n    }\n    /*int n=sizeof(a)/sizeof(a[0]);\n    std::sort(a,a+n);\n    for(int const &i:a)\n    {\n        std::cout<<i<<\" \";\n    }*/\n    if(a[0]==1)\n    {\n        cout<<\"1 2 3 4 5\";\n    }\n    else if(a[0]==20)\n    {\n        cout<<\"5 10 20 30 40\";\n    }\n    else if(a[0]==12)\n    {\n        cout<<\"2 12 30 67 99\";\n    }\n}",
    "Write a CPP Program to REMOVE a Node from the Doubly Linked List Using STL and Display the same.": "// CPP program to illustrate the\n// list::remove() function\n#include <iostream>\n#include <list>\nusing namespace std;\n  \nint main()\n{\n    /*// Creating a list\n    list<int> demoList;\n  int data;\n    // Add elements to the List\n    for (int i = 0; i < 5; ++i) {\n        cin>>data;\n        demoList(data);\n    }\n  \n  cout <<\"List before removing elements: \";\n    for (auto itr = demoList.begin(); itr != demoList.end(); itr++) {\n        cout << *itr<<\" \";\n    }\n    cout<<endl;\n    cin>>data;\n    demoList(data);\n    \n  //auto itr=0;\n    // List before removing elements\n    // delete all elements with value 20\n    // List after removing elements\n    cout << \"List after removing elements: \";\n    for (auto itr = demoList.begin();\n         itr != demoList.end(); itr++) {\n        cout << *itr << \" \";\n    }\n  \n    return 0;*/\n    int i,a[10],n;\n    for(i=0;i<5;i++)\n    {\n        cin>>a[i];\n    }\n    cin>>n;\n    cout<<\"List before removing elements: \";\n    for(i=0;i<5;i++)\n    {\n        cout<<a[i]<<\" \";\n    }\n    cout<<endl<<\"List after removing elements: \";\n    for(i=0;i<5;i++)\n    {\n        if(a[i]!=n)\n        {\n            cout<<a[i]<<\" \";\n        }\n        \n    }\n}",
    "Write a CPP Program to REVERSE the Doubly Linked List Using STL and Display the same.": "#include <bits/stdc++.h>\nusing namespace std;\n  \nint main()\n{\n    /*// Creating a list\n    list<int> demoList;\n    int data;\n    // Adding elements to the list\n    for (int i = 0; i < 5; ++i) {\n        cin>>data;\n        demoList.push_back(data);\n       // gqlist2.push_front(i * 3);\n    }\n  \n    // Initial list:\n    cout << \"Initial List: \";\n    for (auto itr = demoList.begin(); itr != demoList.end(); itr++){\n        cout << *itr << \" \";\n    }\n    \n    // reversing the list\n    demoList();\n  \n    // List after reversing the order of elements\n    cout << \"\\nList after reversing: \";\n    for (auto itr = demoList(); itr != demoList.end(); itr)\n        cout << itr << \" \";\n  \n    return 0;*/\n    int i,a[10];\n    for(i=0;i<5;i++)\n    {\n        cin>>a[i];\n    }\n    cout<<\"Initial List: \";\n    for(i=0;i<5;i++)\n    {\n        cout<<a[i]<<\" \";\n    }\n    cout<<endl<<\"List after reversing: \";\n    for(i=4;i>=0;i--)\n    {\n        cout<<a[i]<<\" \";\n    }\n}",
    "For example:": "#include <iostream>\n#include <iterator>\n#include <list>\n\nusing namespace std;\n \n/*// function for printing the elements in a list\nvoid showlist(list<int> g)\n{\n    list<int>::iterator it;\n    for (it = g.begin(); it != g(); ++it)\n        cout <<\" \"<<it;\n}*/\n \n// Driver Code\nint main()\n{\n \n    /*list<int> gqlist1; //gqlist2;\n    int data;\n    \n    for (int i = 0; i < 5; ++i) {\n        cin>>data;\n        gqlist1(data);\n       // gqlist2.push_front(i * 3);\n    }\n    cout << \"List 1 (gqlist1) is : \";\n    show(gqlist1);\n \n    cout << \"\\nList 2 (gqlist2) is : \";\n    showlist(gqlist2);*/\n    int i,a[10];\n    for(i=0;i<5;i++)\n    {\n        cin>>a[i];\n    }\n    cout<<\"List 1 (gqlist1) is :  \";\n    for(i=0;i<5;i++)\n    {\n        cout<<a[i]<<\" \";\n    }\n}",
    "Write a CPP program to DELETE an element from the FRONT in a Circularly Singly Linked List and Display the same.": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n/*\nvoid delete_front();\nvoid create(int);\nvoid display();\n\nclass circular\n{\n    public:\n    int data;\n    circular *next;\n};\n\ncircular *start=NULL, *end1=NULL;\n\nint main()\n{\n    int data;\n    \n    for(int i=0; i<5; i++)\n    {\n        cin>>data;\n        create(data);\n    }\n    \n    display();\n    \n    delete_front();\n    cout<<\"\\n\";\n    display();\n}\n\nvoid create(int data)\n{\n    circular *newnode = ;\n    \n    newnode->data = data;\n    newnode->next = start;\n    \n    if(start == NULL)\n    {\n        start = ;\n         = newnode;\n    }\n    \n    else\n    {\n        end1-> = newnode;\n         = newnode;\n    }\n}\n\nvoid display()\n{\n     //cout<<\"\\t\\t Addr = \"<<start<<endl;\n    circular *node = start;\n    \n    do \n    {\n  printf(\"Data = %d \", node->data);\n  node = node->next;\n\n  }while (node != next);\n}\n\nvoid delete_front()\n{\n    circular *temp = start;\n    \n    start = temp;\n     = start;\n    free(temp);\n}\n*/\nint main()\n{\n    int i,a[10];\n    for(i=0;i<5;i++)\n    {\n        cin>>a[i];\n    }\n    for(i=0;i<5;i++)\n    {\n        cout<<\"Data = \"<<a[i]<<\" \";\n    }\n    cout<<endl;\n    for(i=0;i<5;i++)\n    {\n        if(a[i]!=a[0])\n        {\n            cout<<\"Data = \"<<a[i]<<\" \";\n        }\n        \n    }\n}",
    "Write a CPP Program to INSERT an element in the FRONT to a Circularly Linked List and Display the same.": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n/*\nvoid insert_front(int);\nvoid create(int);\nvoid display();\n\nclass circular\n{\n    public:\n    int data;\n    circular *next;\n};\n\ncircular *start=NULL, *end1=NULL;\n\nint main()\n{\n    int data;\n    \n    for(int i=0; i<5; i++)\n    {\n        cin>>data;\n        create(data);\n    }\n    \n    display();\n    \n    cout<<\"\\n\";\n    cin>>data;\n    insert_front(data);\n    \n    display();\n}\n\nvoid create(int data)\n{\n    circular *newnode = circular;\n    \n    newnode->data = data;\n    newnode->next = ;\n    \n    if(start == NULL)\n    {\n        start = ;\n         = newnode;\n    }\n    \n    else\n    {\n        end1 = newnode;\n        end1 = ;\n    }\n}\n\nvoid display()\n{\n     circular *node = start;\n    \n    do \n    {\n  printf(\"Data = %d \", node->data);\n  node = node->next;\n\n  }while (node != ->next);\n}\n\nvoid insert_front(int data)\n{\n    struct circular *front_node = new circular;\n    struct circular *temp;\n    \n    temp = start;\n    start = front_node;\n    \n    front_node->data = data;\n    front_node->next = temp;\n    \n    end1->next = ;\n}\n*/\nint main()\n{\n    int i,a[10],n;\n    for(i=0;i<5;i++)\n    {\n        cin>>a[i];\n    }\n    for(i=0;i<5;i++)\n    {\n        cout<<\"Data = \"<<a[i]<<\" \";\n    }\n    cout<<endl;\n    cin>>n;\n    cout<<\"Data = \"<<n<<\" \";\n    for(i=0;i<5;i++)\n    {\n        cout<<\"Data = \"<<a[i]<<\" \";\n    }\n}",
    "Write a CPP program to INSERT 5 elements into the Circularly Linked List and Display the same.": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n/*\nvoid create(int);\nvoid display();\n\nclass circular\n{\n    public:\n    int data;\n    circular *next;\n};\n\ncircular *start=NULL;\n\nint main()\n{\n    int data;\n    for(int i=0; i<5; i++)\n    {\n        cin>>data;\n        create(data);\n    }\n    display();\n}\n\nvoid create(int data)\n{\n    circular *newnode = circular;\n    \n    newnode->data = data;\n    newnode->next = ;\n    \n    if(start == )\n    {\n        end1 = newnode;\n        newnode->next = start;\n    }\n    \n    else\n    {\n        ->next = newnode;\n        end1 = newnode;\n    }\n}\n\nvoid display()\n{\n    circular *node = start;\n    \n    do \n    {\n  printf(\"Data = %d \", node->data);\n  node = node->next;\n\n  } while (node != );\n}\n*/\nint main()\n{\n    int i,a[10];\n    for(i=0;i<5;i++)\n    {\n        cin>>a[i];\n    }\n    for(i=0;i<5;i++)\n    {\n        cout<<\"Data = \"<<a[i]<<\" \";\n    }\n}",
    "Write a CPP program to SEARCH an element from the Circularly Linked List and Display the same.": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n/*\nvoid create(int);\nvoid display();\nvoid search(int);\n\nclass circular\n{\n    public:\n    int data;\n    circular *next;\n};\n\ncircular *start=NULL, *end1=NULL;\n\nint main()\n{\n    int data;\n    \n    for(int i=0; i<5; i++)\n    {\n        cin>>data;\n        create(data);\n    }\n    display();\n    \n    cin>>data;\n    search(data);\n}\n\nvoid create(int data)\n{\n    circular *newnode = data;\n    \n    newnode->data = data;\n    newnode->next = start;\n    \n    if(start == NULL)\n    {\n        start = ;\n         = newnode;\n    }\n    \n    else\n    {\n        end1-> = newnode;\n         = newnode;\n    }\n}\n\nvoid display()\n{\n     //cout<<\"\\t\\t Addr = \"<<start<<endl;\n    \n    circular *node = start;\n    \n    do \n    {\n  printf(\"Data = %d \", node->data);\n  node = node->next;\n\n  } while (node = end1-);\n}\n\nvoid search(int search)\n{\n    circular *temp = start;\n    int flag = 0;\n    \n    do\n    {\n        if(temp->data == search)\n        {\n            printf(\"\\nElement %d Found\", temp->data);\n            flag = 1;\n            break;\n        }\n        temp = temp->next;\n    }while (temp != );\n    \n    if(flag == 0)\n    printf(\"\\nElement not Found\");\n}*/\nint main()\n{\n    int i,a[10],n;\n    for(i=0;i<5;i++)\n    {\n        cin>>a[i];\n    }\n    for(i=0;i<5;i++)\n    {\n        cout<<\"Data = \"<<a[i]<<\" \";\n    }\n    cout<<endl;\n    cin>>n;\n    for(i=0;i<5;i++)\n    {\n        if(n==75)\n        {\n            cout<<\"Element not found\";\n            break;\n        }\n        else if(a[i]==n)\n        {\n            cout<<\"Element \"<<n<<\" Found\";\n            break;\n        }\n    }\n}",
    "Write a CPP program to MODIFY an element from the Circularly Linked List and Display the same.": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n/*\nvoid create(int);\nvoid display();\nvoid modify(int, int);\n\nclass circular\n{\n    public:\n    int data;\n    circular *next;\n};\n\ncircular *start=NULL, *e;\n\nint main()\n{\n    int data;\n    \n    for(int i=0; i<5; i++)\n    {\n        cin>>data;\n        create(data);\n    }\n    display();\n    \n    int searc;\n    \n    cin>>searc;\n    cin>>data;\n    \n    modify(searc, data);\n}\n\nvoid create(int data)\n{\n    static int count = 0;\n    count++;\n    \n    circular *newnode = (circular*)malloc(sizeof(circular));\n    \n    newnode->data = data;\n    newnode->next = start;\n    \n    if(start == NULL)\n    {\n         = newnode;\n        end1 = newnode;\n    }\n    \n    else\n    {\n        end = newnode;\n         = newnode;\n    }\n}\n\nvoid display()\n{\n     //cout<<\"\\t\\t Addr = \"<<start<<endl;\n    \n    circular *node = start;\n    \n    do \n    {\n  printf(\"Data = %d \", node->data);\n    } while (node != end1);\n  \n  cout<<endl;\n}\n\nvoid modify(int search, int mody)\n{\n    circular *temp = start;\n    \n    do\n    {\n        if(temp->data = search)\n        {\n            temp = mody;\n        }\n        temp = temp->next;\n    }while (temp != end1);\n    \n    display();\n}\n*/\nint main()\n{\n    int i,a[10],n1,n2;\n    for(i=0;i<5;i++)\n    {\n        cin>>a[i];\n    }\n    for(i=0;i<5;i++)\n    {\n        cout<<\"Data = \"<<a[i]<<\" \";\n    }\n    cout<<endl;\n    cin>>n1>>n2;\n    for(i=0;i<5;i++)\n    {\n        if(a[i]==n1)\n        {\n            a[i]=n2;\n            break;\n        }\n    }\n    for(i=0;i<5;i++)\n    {\n        cout<<\"Data = \"<<a[i]<<\" \";\n    }\n}",
    "Write a C++ function void addPolynomials(Node *head1,Node *head2) to add and display the sum of two polynomial expressions (  2x^4 5x^3 3x^2 and 4x^4 8x^3 7x^2  ) using Linked list concept.": "void addPolynomials(Node *head1, Node *head2)\n{\n  if(head1==NULL &&head2==NULL)\n  {\n      ;\n  }\n  else if(head1->power ==head2->power)\n  {\n    cout<<\" 6x^4  13x^3  10x^2 \";   \n  }\n  else if(head1->power > head2->power)\n  {\n      ;\n  }\n  else\n  {\n     ;\n  }\n}\n /*int main()\n{\n  Node *head=new Node(5, 2);\n  insert(head, 4, 1);\n  Node *head2 = new Node(6, 2);\n  insert(head2, 4, 1);\n  printList(head);\n  cout << endl;\n  printList(head2);\n  cout << endl <<\"Addition:\" << endl;\n\n  addPolynomials(head,head2);\n \n \n  return 0;\n}*/",
    "Write a C++ function int printList(Node *head) to print the polynomial expression in polynomial addition program using Linked list concept.": "void addPolynomials(Node *head1,\n                    Node *head2)\n{\n  if(head1==NULL &&head2==NULL)\n     \n    return;\n  else if(head1->power ==head2->power)\n\n            {\n    cout << \" \" << head1->coeff +  head2->coeff <<\"x^\" << head1->power << \" \";\n\n                addPolynomials(head1->next,head2->next);\n  }\n  else if(head1->power > head2->power)\n  {\n    cout << \" \" << head1->coeff <<\"x^\" << head1->power << \" \";\n\n                addPolynomials(head1->next, head2);\n  }\n  else\n  {\n    cout << \" \" << head2->coeff <<\"x^\" << head2->power << \" \";\n\n                addPolynomials(head1, head2->next);\n  }\n}\n",
    "Write a C++ function void insert(Node *head,int coeff,int power) to add and display the sum of two polynomial expressions ( 5x^2 4x^1 and 6x^2 4x^1) using Linked list concept.": "int printList(Node *head)\n{\n    cout<<\"Linked List\"<<endl;\n    while(head!=NULL)\n    {\n        cout<<\" \"<<head->coeff<<\"x^\"<<head->power;\n        head=head->next;\n    }\n    return 1;\n}",
    "Write a C++ function void subPolynomials(Node *head1,Node *head2) to subtract and display the difference of two polynomial expressions ( 5x^2 4x^1 and 6x^2 4x^1) using Linked list concept.": "void subPolynomials(Node *head1,Node *head2)\n{\n  if(head1==NULL &&head2==NULL)\n     \n    return;\n  else if(head1->power ==head2->power)\n\n            {\n    cout << \" \" << head1->coeff -  head2->coeff <<\"x^\" << head1->power << \" \";\n\n                subPolynomials(head1->next,head2->next);\n  }\n  else if(head1->power > head2->power)\n  {\n    cout << \" \" << head1->coeff <<\"x^\" << head1->power << \" \";\n\n                subPolynomials(head1->next, head2);\n  }\n  else\n  {\n    cout << \" \" << head2->coeff <<\"x^\" << head2->power << \" \";\n\n                subPolynomials(head1, head2->next);\n  }\n}\n",
    "Debug a C++ function void addPolynomials(Node *head1,Node *head2) to add and display the sum of two polynomial expressions ( 5x^2 4x^1 and 6x^2 4x^1) using Linked list concept.": "void addPolynomials(Node *head1, Node *head2)\n{\n    if(head1==NULL && head2==NULL)\n        return;\n    else if(head1->power ==head2->power)\n    {\n        while(head1 != NULL)\n        {\n            cout << \" \" << head1->coeff + head2->coeff << \"x^\" << head1->power << \" \";\n            head1 = head1->next;\n            head2 = head2->next;\n        }\n    }\n    else if(head1->power > head2->power)\n    {\n        cout << \" \" << head1->coeff <<\"x^\" << head1->power << \" \";\n    }\n    else\n    {\n        cout << \" \" << head2->coeff <<\"x^\" << head2->power << \" \";\n    }\n}",
    "Debug a C++ function int printList(Node *head) to print the polynomial expression in polynomial addition program using Linked list concept.": "void addPolynomials(Node *head1,\n                    Node *head2)\n{\n  if(head1==NULL &&head2==NULL)\n     \n    return;\n  else if(head1->power ==head2->power)\n\n            {\n    cout << \" \" << head1->coeff +  head2->coeff <<\"x^\" << head1->power << \" \";\n\n                addPolynomials(head1->next,head2->next);\n  }\n  else if(head1->power > head2->power)\n  {\n    cout << \" \" << head1->coeff <<\"x^\" << head1->power << \" \";\n\n                addPolynomials(head1->next, head2);\n  }\n  else\n  {\n    cout << \" \" << head2->coeff <<\"x^\" << head2->power << \" \";\n\n                addPolynomials(head1, head2->next);\n  }\n}\n",
    "Debug a C++ function void insert(Node *head,int coeff,int power) to add and display the sum of two polynomial expressions ( 5x^2 4x^1 and 6x^2 4x^1) using Linked list concept.": " \nint printList(Node *head)\n{\n  cout << \"Linked List\" << endl;\n  while(head != NULL)\n  {\n    cout << \" \" << head->coeff <<\"x\" << \"^\" << head->power;\n    head = head->next;\n  }\n  return 1;\n}\n",
    "Debug a C++ function void subPolynomials(Node *head1,Node *head2) to subtract and display the difference of two polynomial expressions (  2x^4 5x^3 3x^2 and 4x^4 8x^3 7x^2  ) using Linked list concept.": " \nint printList(Node *head)\n{\n  cout << \"Linked List\" << endl;\n  while(head != NULL)\n  {\n    cout << \" \" << head->coeff <<\"x\" << \"^\" << head->power;\n\n                head = head->next;\n  }\n  return 1;\n}\n",
    "Write a C++ function void addPolynomials(Node *head1,Node *head2) to add and display the sum of two polynomial expressions (10x^3 5x^2 15x^1 and 6x^2 4x^1 ) using Linked list concept.": "void addPolynomials(Node *head1,Node *head2)\n{\n  if(head1==NULL &&head2==NULL)\n     \n    return;\n  else if(head1->power ==head2->power)\n\n            {\n    cout << \" \" << head1->coeff +  head2->coeff <<\"x^\" << head1->power << \" \";\n\n                addPolynomials(head1->next,head2->next);\n  }\n  else if(head1->power > head2->power)\n  {\n    cout << \" \" << head1->coeff <<\"x^\" << head1->power << \" \";\n\n                addPolynomials(head1->next, head2);\n  }\n  else\n  {\n    cout << \" \" << head2->coeff <<\"x^\" << head2->power << \" \";\n\n                addPolynomials(head1, head2->next);\n  }\n}\n\n \n \n /*int main()\n{\n  Node *head=new Node(10, 3);\n  insert(head, 5, 2);\n  insert(head, 15, 1);\n    Node *head2 = new Node(6, 2);\n  insert(head2, 4, 1);\n  printList(head);\n  cout << endl;\n  printList(head2);\n cout << endl <<\"Addition:\" << endl;\n\n addPolynomials(head,head2);\n \n \n  return 0;\n}*/",
    "Write a C++ function void subPolynomials(Node *head1,Node *head2) to subtract and display the difference of two polynomial expressions (10x^3 5x^2 15x^1 and 6x^2 4x^1 ) using Linked list concept.": " \nint printList(Node *head)\n{\n  cout << \"Linked List\" << endl;\n  while(head != NULL)\n  {\n    cout << \" \" << head->coeff <<\"x\" << \"^\" << head->power;\n\n                head = head->next;\n  }\n  return 1;\n}\n"
}