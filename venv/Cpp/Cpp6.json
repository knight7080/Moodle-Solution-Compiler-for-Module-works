{
    "Write a CPP Program to insert five integer elements in to Stack using Linked LIst (use STL for Stack)": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate <typename T>\n// templating it so that any data type can be used\n\nclass Stack {\npublic:\n\tlist<T> l;\n\tint cs = 0;\n\t// current size of the stack\n\n\t// pushing an element into the stack\n\tvoid push(T d)\n\t{\n\t\tcs++;\n\t\t// increasing the current size of the stack\n\t\tl.push_front(d);\n\t}\n\t// popping an element from the stack\n\tvoid pop()\n\t{\n\t\tif (cs <= 0) {\n\t\t\t// cannot pop us stack does not contain an\n\t\t\t// elements\n\t\t\tcout << \"Stack empty\" << endl;\n\t\t}\n\t\telse {\n\t\t\t// decreasing the current size of the stack\n\t\t\tcs--;\n\t\t\tl.pop_front();\n\t\t}\n\t}\n\t// if current size is 0 then stack is empty\n\tbool empty() \n\t{ \n\t    return cs == 0; \n\t    \n\t}\n\t// getting the element present at the top of the stack\n\tT top() { return l.front(); }\n\tint size()\n\t{\n\t\t// getting the size of the stack\n\t\treturn cs;\n\t}\n\t// printing the elements of the stack\n\tvoid print()\n\t{\n\t\tfor (auto x: l) \n\t\t{\n\t\t\tcout << x << endl;\n\t\t}\n\t}\n};\nint main()\n{\n    int n,num;\n    cin>>n;\n\tStack<int> s;\n\tfor(int i=0;i<n;i++)\n\t{\n\t    cin>>num;\n\t    s.push(num);\n\t}\n\tcout << \"Current size of the stack is \" << s.size() << endl;\n\tcout << \"The top element of the stack is \" << s.top() << endl;\n\ts.pop(); \n\tcout << \"The top element after 1 pop operation is \" << s.top() << endl;\n\ts.pop();\n\tcout << \"The top element after 2 pop operations is \" << s.top() << endl;\n\tcout << \"Size of the stack after 2 pop operations is \" << s.size() << endl;\n\treturn 0;\n}",
    "Write a CPP Program to insert five special character elements in to stack using linked list (use STL for Stack)": "// C++ implementation of stack\n// using list STL\n#include <bits/stdc++.h>\nusing namespace std;\n\ntemplate <typename T>\n// templating it so that any data type can be used\n\nclass Stack {\npublic:\n\tlist<T> l;\n\tint cs = 0;\n\t// current size of the stack\n\n\t// pushing an element into the stack\n\tvoid push(T d)\n\t{\n\t\tcs++;\n\t\t// increasing the current size of the stack\n\t\tl.push_front(d);\n\t}\n\n\t// popping an element from the stack\n\tvoid pop()\n\t{\n\t\tif (cs <= 0) {\n\t\t\t// cannot pop us stack does not contain an\n\t\t\t// elements\n\t\t\tcout << \"Stack empty\" << endl;\n\t\t}\n\t\telse {\n\t\t\t// decreasing the current size of the stack\n\t\t\tcs--;\n\t\t\tl.pop_front();\n\t\t}\n\t}\n\n\t// if current size is 0 then stack is empty\n\tbool empty() { return cs == 0; }\n\n\t// getting the element present at the top of the stack\n\tT top() { return l.front(); }\n\tint size()\n\t{\n\t\t// getting the size of the stack\n\t\treturn cs;\n\t}\n\n\t// printing the elements of the stack\n\tvoid print()\n\t{\n\t\tfor (auto x: l) {\n\t\t\tcout << x << endl;\n\t\t}\n\t}\n};\nint main()\n{\n\tStack<char> s;\n\tint n;\n\tchar x;\n\tcin>>n; \n   //insert elements into stack\n   for(int i=0;i<n;i++)\n    {\n     cin>>x;    \n     s.push(x);\n    }\n\tcout << \"Current size of the stack is \" << s.size() << endl;\n\tcout << \"The top element of the stack is \" << s.top() << endl;\n\ts.pop(); // popping from the stack\n\tcout << \"The top element after 1 pop operation is \" << s.top() << endl; // printing the top of the stack\n\ts.pop(); // popping\n\tcout << \"The top element after 2 pop operations is \" << s.top() << endl;\n\tcout << \"Size of the stack after 2 pop operations is \" << s.size() << endl;\n\treturn 0;\n}",
    "Write a CPP Program to insert five double elements in to stack using linked list (use STL for Stack)": "#include<bits/stdc++.h>\nusing namespace std;\ntemplate <typename T>\n\nclass Stack {\npublic:\n    list<T> l;\n    int cs=0;\n    void push(T d)\n    {\n        cs++;\n        l.push_front(d);\n    }\n    void pop()\n    {\n        if(cs<=0)\n        {\n            cout<<\"Stack empty\"<<endl;\n        }\n        else\n        {\n            cs--;\n            l.pop_front();\n        }\n    }\n    bool empty()\n    {\n        return cs==0;\n    }\n    T top() { return l.front(); }\n    int size()\n    {\n        return cs;\n    }\n    void print()\n    {\n        for(auto x: l)\n        {\n            cout<<x<<endl;\n        }\n    }\n};\nint main()\n{\n    int n;\n    double a;\n    cin>>n;\n    Stack<double> s;\n    for(int i=0;i<n;i++)\n    {\n        cin>>a;\n        s.push(a);\n    }\n    cout<<\"Current size of the stack is \"<<s.size()<<endl;\n    cout<<\"The top element of the stack is \"<<s.top()<<endl;\n    s.pop();\n    cout<<\"The top element after 1 pop operation is \"<<s.top()<<endl;\n    s.pop();\n    cout<<\"The top element after 2 pop operations is \"<<s.top()<<endl;\n    cout<<\"Size of the stack after 2 pop operations is \"<<s.size()<<endl;\n    return 0;\n}",
    "Write a CPP Program to insert five float elements in to Stack using linked list (use STL for Stack)": "// C++ implementation of stack\n// using list STL\n#include <bits/stdc++.h>\nusing namespace std;\n\ntemplate <typename T>\n// templating it so that any data type can be used\n\nclass Stack {\npublic:\n\tlist<T> l;\n\tint cs = 0;\n\t// current size of the stack\n\n\t// pushing an element into the stack\n\tvoid push(T d)\n\t{\n\t\tcs++;\n\t\t// increasing the current size of the stack\n\t\tl.push_front(d);\n\t}\n\n\t// popping an element from the stack\n\tvoid pop()\n\t{\n\t\tif (cs <= 0) {\n\t\t\t// cannot pop us stack does not contain an\n\t\t\t// elements\n\t\t\tcout << \"Stack empty\" << endl;\n\t\t}\n\t\telse {\n\t\t\t// decreasing the current size of the stack\n\t\t\tcs--;\n\t\t\tl.pop_front();\n\t\t}\n\t}\n\n\t// if current size is 0 then stack is empty\n\tbool empty() { return cs == 0; }\n\n\t// getting the element present at the top of the stack\n\tT top() { return l.front(); }\n\tint size()\n\t{\n\t\t// getting the size of the stack\n\t\treturn cs;\n\t}\n\n\t// printing the elements of the stack\n\tvoid print()\n\t{\n\t\tfor (auto x: l) {\n\t\t\tcout << x << endl;\n\t\t}\n\t}\n};\nint main()\n{\n\tStack<float> s;\n\tint n;\n\tfloat x;\n\tcin>>n; \n   //insert elements into stack\n   for(int i=0;i<n;i++)\n    {\n     cin>>x;    \n     s.push(x);\n    }\n\tcout << \"Current size of the stack is \" << s.size() << endl;\n\tcout << \"The top element of the stack is \" << s.top() << endl;\n\ts.pop(); // popping from the stack\n\tcout << \"The top element after 1 pop operation is \" << s.top()<< endl; // printing the top of the stack\n\ts.pop(); // popping\n\tcout << \"The top element after 2 pop operations is \" << s.top() << endl;\n\tcout << \"Size of the stack after 2 pop operations is \"<< s.size() << endl;\n\treturn 0;\n}",
    "Write a CPP program for Postfix To Prefix Conversion using Stack STL": "#include<bits/stdc++.h>\nusing namespace std;\nint IsOperator(char x)\n{\n    switch (x)\n    {\n        case '+':\n        case '-':\n        case '/':\n        case '*':\n        return 1;\n    }\n    return 0;\n}\nint main()\n{\n    string s,c=\"\";\n    cin>>s;\n    stack<char> st;\n    cout<<\"Postfix to Prefix expression:\"<<endl;\n    for(int i=s.length()-1;i>=0;i--)\n    {\n        if(IsOperator(s[i]))\n            st.push(s[i]);\n        else\n        {\n            c+=s[i];\n            while(!st.empty() && st.top()=='#')\n            {\n                st.pop();\n                c+=st.top();\n                st.pop();\n            }\n        st.push('#');\n        }\n    }\n    reverse(c.begin(),c.end());\n    cout<<c;\n}",
    "Write a CPP program for Prefix To Postfix Conversion using Stack STL": "#include <iostream>\n#include<cstring>\n#include<stack>\n#include <bits/stdc++.h>\nusing namespace std;\n\nstruct Node{\n    char data;\n    struct Node * next;\n}*top=NULL;\n\nvoid Push(char x)\n{   struct Node* p=new Node;\n    if(p==NULL)\n        cout<<\"\\nStack Overflow\";\n    else{\n        p->data=x;\n        p->next=top;\n        top=p;\n    }\n}  \n\nchar Pop(){\n    int x=-1;\n    struct Node * p;\n    if(top==NULL)\n        cout<<\"\\nStack is Empty\";\n    else{\n         p=top;\n         x=p->data;\n         top = top->next;\n         delete p;\n    }\n    return x;\n}\n\nint isEmpty(){\n    return top?0:1;\n}\n\nint IsOperator(char x)\n{\n  switch (x) {\n  case '+':\n  case '-':\n  case '/':\n  case '*':\n    return 1;\n  }\n  return 0;\n}\n\n\nstring PrefixToPostfix(string s)\n{\n    string c=\"\";\n    //cout<<\"Enter the Postfix Expression: \"<<endl;\n    cin>>s;\n    stack<char> st;\n    cout<<\"Prefix to Postfix expression: \"<<endl;\n    for(int i=0;i<(int)s.length();i++)\n    {\n        if(IsOperator(s[i]))\n        st.push(s[i]);\n        else{\n            c+=s[i];\n            while(!st.empty() && st.top()=='#')\n            {\n                st.pop();\n                c+=st.top();st.pop();\n            }\n            st.push('#');\n        }\n    }\n    reverse(c.end(),c.begin());\n    \n    return c;\n}\nint main(){\n    char *prefix = new char[0];\n    cin>>prefix;\n   cout<<PrefixToPostfix(prefix);\n}",
    "Write a CPP program for Infix To Prefix Conversion using Linked List Stack STL": "#include <iostream>\n#include<cstring>\n#include<stack>\n#include <bits/stdc++.h>\nusing namespace std;\n\nstruct Node{\n    char data;\n    struct Node * next;\n}*top=NULL;\n\nvoid Push(char x)\n{   struct Node* p=new Node;\n    if(p==NULL)\n        cout<<\"\\nStack Overflow\";\n    else{\n        p->data=x;\n        p->next=top;\n        top=p;\n    }\n}  \n\nchar Pop(){\n    int x=-1;\n    struct Node * p;\n    if(top==NULL)\n        cout<<\"\\nStack is Empty\";\n    else{\n         p=top;\n         x=p->data;\n         top = top->next;\n         delete p;\n    }\n    return x;\n}\n\nint isEmpty(){\n    return top?0:1;\n}\n\nint precedence(char ch)\n{\n  if(ch=='+'||ch=='-')\n    return 1;\n  else{\n    if(ch=='*'||ch=='/')\n      return 2;\n    else\n      return 3;\n  }\n}\n\nstring infixToPrefix(string infix){\n    stack<char> s;\n    int length=0,i,t;\nstring prefix=\"\";\n    cin>>infix;\n    \n    length=infix.length();\n    \n    // Reverse infix\n    reverse(infix.begin(), infix.end());\n\n    for(i=0;i<length;i++){\n      t=precedence(infix[i]);\n      if(t==3){\n        prefix+=infix[i];\n        continue;\n      }\n      else{\n        if(s.empty() || t>=precedence(s.top())){\n          s.push(infix[i]);\n          continue;\n        }\n        else{\n          while(!s.empty() && t<precedence(s.top())){\n            prefix+=s.top();\n            s.pop();\n          }\n          s.push(infix[i]);\n          continue;\n        }\n      }\n    }\n    while(!s.empty()){\n      prefix +=s.top();\n      s.pop();\n    }\n\n    reverse(prefix.begin(),prefix.end());\n\n    return prefix;\n}\nint main(){\n    char *infix = new char[0];\n    cin>>infix;\n   cout<<infixToPrefix(infix);\n}",
    "Write a CPP Program to implement Queue using Linked List, insert double elements in to Q and delete two items from Q. ": "#include<bits/stdc++.h>\nusing namespace std;\nstruct QNode\n{\n    double data;\n    QNode* next;\n    QNode(double d)\n    {\n        data=d;\n        next=NULL;\n    }\n};\nstruct Queue\n{\n    QNode *front,*rear;\n    Queue()\n    {\n        front=rear=NULL;\n    }\n    void enQueue(double x)\n    {\n        QNode* temp=new QNode(x);\n        if(rear==NULL)\n        {\n            front=rear=temp;\n            return;\n        }\n        rear->next=temp;\n        rear=temp;\n    }\n    void deQueue()\n    {\n        if(front==NULL)\n            return;\n        QNode* temp=front;\n        front=front->next;\n        \n        if(front==NULL)\n            rear=NULL;\n        delete(temp);\n    }\n    void display()\n    {\n        if(front==NULL)\n        {\n            cout<<\"Underflow.\"<<endl;\n            return;\n        }\n        QNode* temp=front;\n        while(temp)\n        {\n            cout<<temp->data<<\" \";\n            temp=temp->next;\n        }\n        cout<<endl;\n    }\n};\nint main()\n{\n    Queue q;\n    int n;\n    double x;\n    q.display();\n    cin>>n;\n    for(int i=0;i<n;i++)\n    {\n        cin>>x;\n        q.enQueue(x);\n    }\n    cout<<\"Queue :\";\n    q.display();\n    cout<<\"After DeQueue :\";\n    q.deQueue();\n    q.deQueue();\n    q.display();\n    cout<<\"Queue Front : \"<<(q.front)->data<<endl;\n    cout<<\"Queue Rear : \"<<(q.rear)->data<<endl;\n    return 0;\n}",
    "Write a CPP Program to implement Queue using Linked List, insert integer elements in to Q and delete two items from Q. ": "#include<iostream>\nusing namespace std;\nstruct Node\n{\n    float data;\n    Node *next;\n};\nclass Queue\n{\n    public:\n    Node *front,*rear;\n    Queue()\n    {\n        front=rear=NULL;\n    }\n    void insert(float n);\n    void deleteitem();\n    void display();\n    ~Queue();\n};\nvoid Queue::insert(float n)\n{\n    Node *temp=new Node;\n    if(temp==NULL)\n    {\n        cout<<\"Overflow\"<<endl;\n        return;\n    }\n    temp->data=n;\n    temp->next=NULL;\n    if(front==NULL)\n    {\n        front=rear=temp;\n    }\n    else\n    {\n        rear->next=temp;\n        rear=temp;\n    }\n    cout<<n<<\" \";\n}\nvoid Queue::display()\n{\n    if(front==NULL)\n    {\n        cout<<\"Underflow.\"<<endl;\n        return;\n    }\n    Node *temp=front;\n    while(temp)\n    {\n        cout<<temp->data<<\" \";\n        temp=temp->next;\n    }\n    cout<<endl;\n}\nvoid Queue::deleteitem()\n{\n    if(front==NULL)\n    {\n        cout<<\"underflow\"<<endl;\n        return;\n    }\n    if(front==rear)\n        front=rear=NULL;\n    else\n        front=front->next;\n}\nQueue::~Queue()\n{\n    while(front!=NULL)\n    {\n        Node *temp=front;\n        front=front->next;\n        delete temp;\n    }\n    rear=NULL;\n}\nint main()\n{\n    int n,i;\n    float a[10];\n    cin>>n;\n    Queue Q;\n    Q.display();\n    cout<<\"Queue :\";\n    for(i=0;i<n;i++)\n    {\n        cin>>a[i];\n        Q.insert(a[i]);\n    }\n    cout<<endl;\n    Q.deleteitem();\n    Q.deleteitem();\n    cout<<\"After DeQueue :\";\n    Q.display();\n    cout<<\"Queue Front : \"<<(Q.front)->data<<endl;\n    cout<<\"Queue Rear : \"<<(Q.rear)->data;\n    return 0;\n}",
    "Write a CPP Program to implement Queue using Linked List, insert character elements in to Q and delete two items from Q. ": "#include <bits/stdc++.h>\nusing namespace std;\nstruct QNode \n{\n\tchar data;\n\tQNode* next;\n\tQNode(char d)\n\t{\n\t\tdata = d;\n\t\tnext = NULL;\n\t}\n};\nstruct Queue \n{\n\tQNode *front, *rear;\n\tQueue()\n\t{ \n\t    front = rear = NULL; \n\t    \n\t}\n\tvoid enQueue(char x)\n\t{\n\t\t// Create a new LL node\n\t\tQNode* temp = new QNode(x);\n\t\t// If queue is empty, then\n\t\t// new node is front and rear both\n\t\tif (rear == NULL)\n\t\t{\n\t\t\tfront = rear = temp;\n\t\t\treturn;\n\t\t}\n\t\t// Add the new node at\n\t\t// the end of queue and change rear\n\t\trear->next =temp;\n\t\trear = temp;\n\t}\n\t// Function to remove\n\t// a key from given queue q\n\tvoid deQueue()\n\t{\n\t\t// If queue is empty, return NULL.\n\t\tif (front == NULL)\n\t\t\treturn;\n\t\t// Store previous front and\n\t\t// move front one node ahead\n\t\tQNode* temp = front;\n\t\tfront = front->next;\n\n\t\t// If front becomes NULL, then\n\t\t// change rear also as NULL\n\t\tif (front == NULL)\n\t\t\trear = NULL;\n\t\t\t\n\t\tdelete (temp);\n\t}\n\tvoid display()\n\t{\n\t    if(front==NULL)\n        {\n            cout<<\"Underflow.\"<<endl;\n            return;\n        }\n        QNode* temp=front;\n        //will check until NULL is not found\n        while(temp)\n        {\n            cout<<temp->data<<\" \";\n            temp=temp->next;\n        }\n        cout<<endl;\n    }\n};\n\n// Driven Program\nint main()\n{\n\tQueue q;\n\tint n;\n\tchar x;\n\tq.display();\n\tcin>>n;\n    for(int i=0;i<n;i++)\n    {\n    cin>>x;\n    q.enQueue(x);\n    }\n    cout << \"Queue :\" ;\n\tq.display();\n\tcout << \"After DeQueue :\" ;\n\tq.deQueue();\n\tq.deQueue();\n\tq.display();\n\tcout << \"Queue Front : \" << (q.front)->data << endl;\n\tcout << \"Queue Rear : \" << (q.rear)->data;\n}",
    "write a C++ program to implement FCFS algorithm(no of.process p1,p2 and p3 and its burst time are 10,5 & 8) find out waiting time,turn around time,average waiting time & average turn around time?": "#include<iostream>\nusing namespace std;\nint main()\n{\n    int bt[20],wt[20],tat[20],i,j,n,total=0;\n    float avg_wt,avg_tat;\n    n=3;\n    bt[0]=10,bt[1]=5,bt[2]=8;\n    wt[0]=0; \n    for(i=1;i<n;i++)\n    {\n        wt[i]=0;\n        for(j=0;j<i;j++)\n            wt[i]+=bt[j];\n        total+=wt[i];\n    }\n    avg_wt=(float)total/n; \n    total=0;\n    cout<<\"Processes   BT time   WT time   TA time\"<<endl;\n    for(i=0;i<n;i++)\n    {\n        tat[i]=bt[i]+wt[i];\n        total+=tat[i];\n        cout<<\"       \"<<i+1<<\"       \"<<bt[i]<<\"       \"<<wt[i]<<\"       \"<<tat[i]<<endl;\n    }\n    avg_tat=(float)total/n;\n    cout<<\"Average waiting time = \"<<avg_wt<<endl;\n    cout<<\"Average turn around time = \"<<avg_tat;\n    return 0;\n}",
    "write a C++ program to implement FCFS algorithm(to read no of.process p1,p2,p3 and p4 and its burst time from the user) & find out waiting time of the each process & Average waiting time of the process?": "#include<iostream>\nusing namespace std;\nint main()\n{\n    int bt[20],wt[20],tat[20],i,j,n,total=0;\n    float avg_wt;\n    n=4;\n    for(i=0;i<n;i++)\n    {\n        cin>>bt[i];\n    }\n    wt[0]=0; \n    for(i=1;i<n;i++)\n    {\n        wt[i]=0;\n        for(j=0;j<i;j++)\n        wt[i]+=bt[j];\n        total+=wt[i];\n    }\n    avg_wt=(float)total/n; \n    total=0;\n    cout<<\"Processes   BT time   WT time\"<<endl;\n    for(i=0;i<n;i++)\n    {\n        tat[i]=bt[i]+wt[i];\n        total+=tat[i];\n        cout<<\"       \"<<i+1<<\"       \"<<bt[i]<<\"       \"<<wt[i]<<endl;\n    }\n    cout<<\"Average waiting time = \"<<avg_wt<<endl;\n    return 0;\n}",
    "write a C++ program to implement FCFS algorithm(no of.process p1,p2 and p3 and its burst time are 10,5 & 8) find out waiting time of the process?": "#include<iostream>\nusing namespace std;\nint main()\n{\n    int bt[20],wt[20],tat[20],i,j,n,total=0;\n    n=3;\n    bt[0]=10,bt[1]=5,bt[2]=8;\n    wt[0]=0;\n    for(i=1;i<n;i++)\n    {\n        wt[i]=0;\n        for(j=0;j<i;j++)\n            wt[i]+=bt[j];\n        total+=wt[i];\n    }\n    cout<<\"Processes   BT time   WT time \"<<endl;\n    for(i=0;i<n;i++)\n    {\n        tat[i]=bt[i]+wt[i];\n        total+=tat[i];\n        cout<<\"       \"<<i+1<<\"       \"<<bt[i]<<\"       \"<<wt[i]<<endl;\n    }\n    return 0;\n}",
    "write a C++ program to implement FCFS algorithm (to read no of.process p1,p2,p3 and p4 and its burst time  from the user )& find out waiting time,turn around time,average waiting time & average turn around time?": "#include<iostream>\nusing namespace std;\nint main()\n{\n    int bt[20],wt[20],tat[20],i,j,n,total=0;\n    float avg_wt,avg_tat;\n    n=4;\n    for(i=0;i<n;i++)\n    {\n        cin>>bt[i];\n    }\n    wt[0]=0;\n    for(i=1;i<n;i++)\n    {\n        wt[i]=0;\n        for(j=0;j<i;j++)\n            wt[i]+=bt[j];\n        total+=wt[i];\n    }\n    avg_wt=(float)total/n;\n    total=0;\n    cout<<\"Processes   BT time   WT time   TA time \"<<endl;\n    for(i=0;i<n;i++)\n    {\n        tat[i]=bt[i]+wt[i];\n        total+=tat[i];\n        cout<<\"       \"<<i+1<<\"       \"<<bt[i]<<\"       \"<<wt[i]<<\"       \"<<tat[i]<<endl;\n    }\n    avg_tat=(float)total/n;\n    cout<<\"Average waiting time = \"<<avg_wt<<endl;\n    cout<<\"Average turn around time = \"<<avg_tat;\n    return 0;\n}",
    "write a C++ program to implement FCFS algorithm(no of.process p1,p2 and p3 and its burst time are 10,5 & 8) find out waiting time of the each process & Average waiting time of the process?": "#include<iostream>\nusing namespace std;\nint main()\n{\n    int bt[20],wt[20],tat[20],i,j,n,total=0;\n    float avg_wt;\n    n=3;\n    bt[0]=10,bt[1]=5,bt[2]=8;\n    wt[0]=0;\n    for(i=1;i<n;i++)\n    {\n        wt[i]=0;\n        for(j=0;j<i;j++)\n            wt[i]+=bt[j];\n        total+=wt[i];\n    }\n    avg_wt=(float)total/n;\n    total=0;\n    cout<<\"Processes   BT time   WT time\"<<endl;\n    for(i=0;i<n;i++)\n    {\n        tat[i]=bt[i]+wt[i];\n        total+=tat[i];\n        cout<<\"       \"<<i+1<<\"       \"<<bt[i]<<\"       \"<<wt[i]<<endl;\n    }\n    cout<<\"Average waiting time = \"<<avg_wt<<endl;\n    return 0;\n}"
}