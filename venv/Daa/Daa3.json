{
    "To Write a Python Program to find longest common subsequence using Dynamic Programming": "def lcs(str1,str2):\n    m,n=len(str1),len(str2)\n    table=[[0]*(n+1) for _ in range(m+1)]\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if str1[i-1]==str2[j-1]:\n                table[i][j]=1+table[i-1][j-1]\n            else:\n                table[i][j]=max(table[i-1][j],table[i][j-1])\n    lcs=\"\"\n    i,j=m,n\n    while i>0 and j>0:\n        if str1[i-1]==str2[j-1]:\n            lcs=str1[i-1]+lcs\n            i-=1\n            j-=1\n        elif table[i-1][j]>table[i][j-1]:\n            i-=1\n        else:\n            j-=1\n    return lcs\nstr1=input()\nstr2=input()\nprint(lcs(str1,str2))",
    "Create a python program to find the length of longest common subsequence using naive recursive method": "def lcs(str1, str2):\n    m, n = len(str1), len(str2)\n    table = [[0] * (n+1) for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if str1[i-1] == str2[j-1]:\n                table[i][j] = 1 + table[i-1][j-1]\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    lcs = \"\"\n    i, j = m, n\n    while i > 0 and j > 0:\n        if str1[i-1] == str2[j-1]:\n            lcs = str1[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    return lcs\nstr1=input()\nstr2=input()\nprint(\"Length of LCS is \",len(lcs(str1,str2)))",
    "Create a python program to find the longest common subsequence using Memoization Implementation.": "def lcs(str1, str2):\n    m, n = len(str1), len(str2)\n    table = [[0] * (n+1) for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if str1[i-1] == str2[j-1]:\n                table[i][j] = 1 + table[i-1][j-1]\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    lcs = \"\"\n    i, j = m, n\n    while i > 0 and j > 0:\n        if str1[i-1] == str2[j-1]:\n            lcs = str1[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    return lcs\nstr1=input()\nstr2=input()\nprint(\"Length of LCS is\",len(lcs(str1,str2)))",
    "The longest common substring problem is the problem of finding the longest string (or strings) that is a substring (or are substrings) of two strings.": "def lcs(str1,str2):\n    m,n=len(str1),len(str2)\n    table=[[0]*(n+1) for _ in range(m+1)]\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if str1[i-1]==str2[j-1]:\n                table[i][j]=1+table[i-1][j-1]\n            else:\n                table[i][j]=max(table[i-1][j],table[i][j-1])\n    lcs=\"\"\n    i,j=m,n\n    while i>0 and j>0:\n        if str1[i-1]==str2[j-1]:\n            lcs=str1[i-1]+lcs\n            i-=1\n            j-=1\n        elif table[i-1][j]>table[i][j-1]:\n            i-=1\n        else:\n            j-=1\n    return lcs\nstr1=input()\nstr2=input()\nprint(\"The longest common substring is\",lcs(str1,str2))",
    "Given two strings \u2018X\u2019 and \u2018Y\u2019, find the length of the longest common substring. ": "def LCS(X, Y, m, n):\n    maxLength = 0\n    endingIndex = m\n    lookup = [[0 for x in range(n + 1)] for y in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                lookup[i][j] = lookup[i - 1][j - 1] + 1\n                if lookup[i][j] > maxLength:\n                    maxLength = lookup[i][j]\n                    endingIndex = i\n    return X[endingIndex - maxLength: endingIndex]\n\nX = input()\nY = input()\nm = len(X)\nn = len(Y)\nsub=LCS(X, Y, m, n)\nprint(\"Length of Longest Common Substring is\",len(sub))",
    "Create a Python program to find longest common substring or subword (LCW) of two strings using dynamic programming with bottom-up approach.": "def lcw(X,Y):\n    m = len(X)\n    n = len(Y)\n    maxLength = 0\n    endingIndex = m\n    lookup = [[0 for x in range(n + 1)] for y in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                lookup[i][j] = lookup[i - 1][j - 1] + 1\n                if lookup[i][j] > maxLength:\n                    maxLength = lookup[i][j]\n                    endingIndex = i\n    return X[endingIndex - maxLength: endingIndex]\n\nu = input()\nv = input()\nprint(\"Longest Common Subword:\", lcw(u,v))",
    "Create a  Python program to find longest common substring or subword (LCW) of two strings using dynamic programming with top-down approach or memoization.": "def lcw(X,Y):\n    m = len(X)\n    n = len(Y)\n    maxLength = 0\n    endingIndex = m\n    lookup = [[0 for x in range(n + 1)] for y in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                lookup[i][j] = lookup[i - 1][j - 1] + 1\n                if lookup[i][j] > maxLength:\n                    maxLength = lookup[i][j]\n                    endingIndex = i\n    return X[endingIndex - maxLength: endingIndex]\n\nu = input()\nv = input()\nprint(\"Longest Common Subword:\", lcw(u,v))",
    "LONGEST PALINDROMIC SUBSEQUENCE": "dp=[[-1 for i in range(1001)]for j in range(1001)]\ndef ls(s1,s2,n1,n2):\n    if n1==0 or n2==0:\n        return 0\n    if dp[n1][n2]!=-1:\n        return dp[n1][n2]\n    if s1[n1-1]==s2[n2-1]:\n        dp[n1][n2] = 1 + ls(s1,s2,n1-1,n2-1)\n        return dp[n1][n2]\n    else:\n        dp[n1][n2] = max(ls(s1,s2,n1-1,n2),ls(s1,s2,n1,n2-1))\n        return dp[n1][n2]\nspec=input()\nn=len(spec)\nsi=spec\nsi=si[::-1]\nprint(f\"The length of the LPS is\",ls(si,spec,n,n))",
    "Given a string s, return the longest palindromic substring in s.": "class Solution(object):\n   def longestPalindrome(self, s):\n      dp = [[False for i in range(len(s))] for i in range(len(s))]\n      for i in range(len(s)):\n         dp[i][i] = True\n      max_length = 1\n      start = 0\n      for l in range(2,len(s)+1):\n         for i in range(len(s)-l+1):\n            end = i+l\n            if l==2:\n               if s[i] == s[end-1]:\n                  dp[i][end-1]=True\n                  max_length = l\n                  start = i\n            else:\n               if s[i] == s[end-1] and dp[i+1][end-2]:\n                  dp[i][end-1]=True\n                  max_length = l\n                  start = i\n      return s[start:start+max_length]\nob1 = Solution()\nstr1=input()\nprint(ob1.longestPalindrome(str1))",
    "Create a python program to find the longest palindromic substring using Brute force method in a given string.": "def printSubStr(str, low, high):\n\tfor i in range(low, high + 1):\n\t\tprint(str[i], end = \"\")\ndef longestPalindrome(str):\n\tn = len(str)\n\tmaxLength = 1\n\tstart = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tflag = 1\n\t\t\tfor k in range(0, ((j - i) // 2) + 1):\n\t\t\t\tif (str[i + k] != str[j - k]):\n\t\t\t\t\tflag = 0\n\t\t\tif (flag != 0 and (j - i + 1) > maxLength):\n\t\t\t\tstart = i\n\t\t\t\tmaxLength = j - i + 1\n\tprintSubStr(str, start, start + maxLength - 1)\n\t\nstr = input()\nlongestPalindrome(str)",
    "Create a python program to find the longest palindromic substring using optimal algorithm Expand around center.": "def printSubStr(ss, low, high):\n\tfor i in range(low, high + 1):\n\t\tprint(s[i], end = \"\")\ndef findLongestPalindromicSubstring(s):\n\tn = len(s)\n\tmaxLength = 1\n\tstart = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tflag = 1\n\t\t\tfor k in range(0, ((j - i) // 2) + 1):\n\t\t\t\tif (s[i + k] != s[j - k]):\n\t\t\t\t\tflag = 0\n\t\t\tif (flag != 0 and (j - i + 1) > maxLength):\n\t\t\t\tstart = i\n\t\t\t\tmaxLength = j - i + 1\n\tprintSubStr(s, start, start + maxLength - 1)\ns = input()\n#findLongestPalindromicSubstring(s)",
    "Create a Naive recursive python program to find the minimum number of operations to convert str1 to str2": "def LD(s, t):\n    #########  Add your code here ###########\n    if s==\"\":\n        return len(t)\n    if t==\"\":\n        return len(s)\n    if s[-1]==t[-1]:\n        cost=0\n    else:\n        cost=1\n    res=min([LD(s[:-1],t)+1,LD(s,t[:-1])+1,LD(s[:-1],t[:-1])+cost])\n    return res\nstr1=input()\nstr2=input()\nprint('Edit Distance',LD(str1,str2))",
    "Create a python program to find the Edit distance between two strings using dynamic programming.": "def LD(s, t):\n    if s == \"\":\n        return len(t)\n    if t == \"\":\n        return len(s)\n    if s[-1] == t[-1]:\n        cost = 0\n    else:\n        cost = 1\n    res = min([LD(s[:-1], t)+1,\n               LD(s, t[:-1])+1, \n               LD(s[:-1], t[:-1]) + cost])\n    return res\n    \nstr1=input()\nstr2=input()\nprint(\"No. of Operations required :\",LD(str1,str2))",
    "Create a python program to compute the edit distance between two given strings using iterative method.": "def LD(s, t):\n    if s == \"\":\n        return len(t)\n    if t == \"\":\n        return len(s)\n    if s[-1] == t[-1]:\n        cost = 0\n    else:\n        cost = 1\n    res = min([LD(s[:-1], t)+1,\n               LD(s, t[:-1])+1, \n               LD(s[:-1], t[:-1]) + cost])\n    return res\n    \nstr1=input()\nstr2=input()\nprint(LD(str1,str2))",
    "Create a python program to find the solution of sudoku puzzle using Backtracking.": "board = [\n    [0, 0, 0, 8, 0, 0, 4, 0, 3],\n    [2, 0, 0, 0, 0, 4, 8, 9, 0],\n    [0, 9, 0, 0, 0, 0, 0, 0, 2],\n    [0, 0, 0, 0, 2, 9, 0, 1, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 7, 0, 6, 5, 0, 0, 0, 0],\n    [9, 0, 0, 0, 0, 0, 0, 8, 0],\n    [0, 6, 2, 7, 0, 0, 0, 0, 1],\n    [4, 0, 3, 0, 0, 6, 0, 0, 0]]\n\ndef printBoard(board):\n    for i in range(0, 9):\n        for j in range(0, 9):\n            print(board[i][j], end=\" \")\n        print()\n\ndef isPossible(board, row, col, val):\n    for j in range(0, 9):\n        if board[row][j] == val:\n            return False\n\n    for i in range(0, 9):\n        if board[i][col] == val:\n            return False\n\n    startRow = (row // 3) * 3\n    startCol = (col // 3) * 3\n    for i in range(0, 3):\n        for j in range(0, 3):\n            if board[startRow+i][startCol+j] == val:\n                return False\n    return True\n\ndef solve():\n    #####################  Add your code here #########################\n    for i in range(9):\n        for j in range(9):\n            if board[i][j]==0:\n                for val in range(1,10):\n                    if isPossible(board,i,j,val):\n                        board[i][j]=val\n                        solve()\n                        board[i][j]=0\n                return\n    printBoard(board)\nsolve()"
}