{
    "Write a Java program to create a reverse order view of the elements contained in a given tree set.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        TreeSet<String> ts=new TreeSet<String>();\n        for(int i=0;i<n;i++)\n        {\n            ts.add(sc.next());\n        }\n        System.out.println(\"Original tree set:\"+ts);\n        Iterator i=ts.descendingIterator();\n        System.out.println(\"Elements in Reverse Order:\");\n        while(i.hasNext())\n        {\n            System.out.println(i.next());\n        }\n    }\n}",
    "Write a Java program to compare two tree sets.(Use Integer).": "import java.util.*;\npublic class color {\n  public static void main(String[] args) {\n      Scanner sc=new Scanner(System.in);\n  TreeSet<String> tree_set = new TreeSet<String>();\n  int size=sc.nextInt();\n  for(int i=0;i<size;i++)\n  {\n  tree_set.add(sc.next());\n  }\n  System.out.println(\"Tree set: \");\n  System.out.println(tree_set);\n }\n}",
    "Write a Java program to print odd number  from a tree set.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n1=sc.nextInt();\n        TreeSet<String> ts1 = new TreeSet<String>();\n        for(int i=0;i<n1;i++)\n        {\n            ts1.add(sc.next());\n        }\n        int n2=sc.nextInt();\n        TreeSet<String> ts2 = new TreeSet<String>();\n        for(int i=0;i<n2;i++)\n        {\n            ts2.add(sc.next());\n        }\n        System.out.println(\"Free Tree set: \"+ts1);\n        System.out.println(\"Second Tree set: \"+ts2);\n        TreeSet<String> result=new TreeSet<String>();\n        for (String i: ts1)\n        {\n            System.out.println(ts2.contains(i) ? \"Yes\" : \"No\");\n        }\n    }\n}",
    "Write a java program to display the output use java.util.TreeSet.tailSet() method is used to set a point of start for a\ntree set, to return all the elements greater than the element passed as\nparameter mentioned to the method in a sorted manner including the\nelement.Note: tailset start from 10 (use integer)": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        TreeSet<Integer> ts=new TreeSet<Integer>();\n        for(int i=0;i<n;i++)\n        {\n            ts.add(sc.nextInt());\n        }\n        TreeSet<Integer> tail_set=new TreeSet<Integer>();\n        tail_set = (TreeSet<Integer>)ts.tailSet(10);\n        Iterator i = tail_set.iterator();\n        System.out.println(\"The resultant values from the tail: \");\n        while (i.hasNext())\n        {\n            System.out.println(i.next() + \" \");\n        }\n    }\n}",
    "Create the java program to demonstrate floor method for Integer value.Note: floor value for integer 25.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        TreeSet<Integer> ts=new TreeSet<Integer>();\n        for (int i=0;i<n;i++)\n        {\n            ts.add(sc.nextInt());\n        }\n        System.out.println(\"Original tree set: \"+ts);\n        for (int i: ts)\n        {\n            if(i%2!=0)\n                System.out.println(i);\n        }\n    }\n}",
    "Write a Java program to compare two tree sets.(Use string).": "import java.util.*;\nimport java.util.Iterator;\n  public class Exercise4 {\n  public static void main(String[] args) {\n    Scanner sc=new Scanner(System.in);\n    int size=sc.nextInt();\n     TreeSet<String> t_set = new TreeSet<String>();\n  for(int i=0;i<size;i++)\n  {\n  t_set.add(sc.next());\n  }\n \n          \n    \n   System.out.println(\"Original tree set:\" + t_set);  \n     Iterator it = t_set.descendingIterator();\n     \n     System.out.println(\"Elements in Reverse Order:\");\n     while (it.hasNext()) {\n        System.out.println(it.next());\n     }\n  }\n}\n",
    "Write a java program to display the output use java.util.TreeSet.tailSet() method is used to set a point of start for a\ntree set, to return all the elements greater than the element passed as\nparameter mentioned to the method in a sorted manner including the\nelement.Note: Use string tailset start from \"i\".": "import java.util.*;\nimport java.util.Iterator;\n\n  public class Exercise8 {\n  public static void main(String[] args) {\n\n  Scanner sc=new Scanner(System.in);\n  int size1=sc.nextInt();\n  TreeSet<String> t_set1 = new TreeSet<String>();\n  for(int i=0;i<size1;i++)\n  {\n  t_set1.add(sc.next());\n  }\n          System.out.println(\"Free Tree set: \"+t_set1);\n\n          \n           int size2=sc.nextInt();\n            TreeSet<String> t_set2 = new TreeSet<String>();\n            for(int i=0;i<size2;i++)\n            {\n            t_set2.add(sc.next());\n            }\n          System.out.println(\"Second Tree set: \"+t_set2);\n          \n          TreeSet<String> result_set = new TreeSet<String>();\n         for (String element : t_set1){\n             System.out.println(t_set2.contains(element) ? \"Yes\" : \"No\");\n          }      \n     }\n}\n",
    "Write a Java program to create a new tree set, add n number of  colors (string) and print out the tree set.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        TreeSet<String> ts = new TreeSet<String>();\n        for(int i=0;i<n;i++)\n        {\n            ts.add(sc.next());\n        }\n        System.out.println(\"Tree set:\\n\"+ts);\n    }\n}",
    "Write a Java program to retrieve and remove the last element of a tree set.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n1=sc.nextInt();\n        TreeSet<Integer> ts1 = new TreeSet<Integer>();\n        for(int i=0;i<n1;i++)\n        {\n            ts1.add(sc.nextInt());\n        }\n        int n2=sc.nextInt();\n        TreeSet<Integer> ts2 = new TreeSet<Integer>();\n        for(int i=0;i<n2;i++)\n        {\n            ts2.add(sc.nextInt());\n        }\n        System.out.println(\"Free Tree set: \"+ts1);\n        System.out.println(\"Second Tree set: \"+ts2);\n        TreeSet<Integer> result=new TreeSet<Integer>();\n        for (Integer i: ts1)\n        {\n            System.out.println(ts2.contains(i) ? \"Yes\" : \"No\");\n        }\n    }\n}",
    "Write a java program to display the heterogenous object with help of stringbuffer concepts.": "import java.util.*;\nimport java.util.Iterator;\n\n  public class Exercise8 {\n  public static void main(String[] args) {\n\n  Scanner sc=new Scanner(System.in);\n  int size1=sc.nextInt();\n  TreeSet<Integer> t_set1 = new TreeSet<Integer>();\n  for(int i=0;i<size1;i++)\n  {\n  t_set1.add(sc.nextInt());\n  }\n          System.out.println(\"Free Tree set: \"+t_set1);\n\n          \n           int size2=sc.nextInt();\n            TreeSet<Integer> t_set2 = new TreeSet<Integer>();\n            for(int i=0;i<size2;i++)\n            {\n            t_set2.add(sc.nextInt());\n            }\n          System.out.println(\"Second Tree set: \"+t_set2);\n          \n          TreeSet<Integer> result_set = new TreeSet<Integer>();\n         for (Integer element : t_set1){\n             System.out.println(t_set2.contains(element) ? \"Yes\" : \"No\");\n          }      \n     }\n}\n",
    "Write a java program tailset start from the 15(Integer) , use the tailSet() method of SortedSet interface in Java is used to return a view of the portion of this set whose elements are greater than or equal to the parameter fromElement.": "import java.util.*;\nimport java.util.Iterator;\npublic class Exercise15 {\n    public static void main(String[] args)\n    {\n        Scanner sc=new Scanner(System.in);\n        TreeSet <Integer>tree_num = new TreeSet<Integer>();\n        TreeSet <Integer>treeheadset = new TreeSet<Integer>();\n         \n        int size=sc.nextInt();\n        for(int i=0;i<size;i++)\n        {\n            tree_num.add(sc.nextInt());\n        }\n        System.out.println(\"Original tree set: \"+tree_num);\n        System.out.println(\"Removes the last element: \"+tree_num.pollLast());\n        System.out.println(\"Tree set after removing last element: \"+tree_num);\n    }    \n}\n",
    "Create a java program to display the containskey of 104 and to retrieve the key and value from hashmap .": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        HashMap<Integer,String> hm = new HashMap<Integer,String>();\n        for(int i=0;i<n;i++)\n        {\n            hm.put(sc.nextInt(),sc.next());\n        }\n        Iterator<Integer> i=hm.keySet().iterator();\n        while(i.hasNext())\n        {\n            int key = i.next();\n            System.out.println(\"key: \" + key + \" value: \"+hm.get(key));\n        }\n        System.out.println(\"Does HashMap contains 104 as key: \"+hm.containsKey(104));\n    }\n}",
    "Create a java program to retrieve the key and value from hashtable for all input value.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        Map<Integer,String> hm = new Hashtable<Integer,String>();\n        for(int i=0;i<n;i++)\n        {\n            hm.put(sc.nextInt(),sc.next());\n        }\n        Iterator<Integer> i=hm.keySet().iterator();\n        while(i.hasNext())\n        {\n            int key = i.next();\n            System.out.println(\"key: \" + key + \" value: \"+hm.get(key));\n        }\n    }\n}",
    "Create a java program to create and add objects and check whether a particular key/value exist  in hashmap interface.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        Map<Integer,String> hm = new Hashtable<Integer,String>();\n        for(int i=0;i<n;i++)\n        {\n            hm.put(sc.nextInt(),sc.next());\n        }\n        Iterator<Integer> i=hm.keySet().iterator();\n        while(i.hasNext())\n        {\n            int key = i.next();\n            System.out.println(\"key: \" + key + \" value: \"+hm.get(key));\n        }\n        System.out.println(\"Size of Map: \"+hm.size());\n        hm.clear();\n        System.out.println(\"Size of Map: \"+hm.size());\n    }\n}",
    "Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, all values convert to uppercase  in hashmap interface.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        HashMap<Integer,String> hm = new HashMap<Integer,String>();\n        for(int i=0;i<n;i++)\n        {\n            hm.put(sc.nextInt(),sc.next());\n        }\n        hm.replaceAll( (key, value) -> value.toUpperCase());\n        System.out.println(\"Updated HashMap: \"+hm);\n    }\n}",
    "Create a java program to create and add objects and apply the synchronized map in map interface then display the map elements.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        HashMap<Integer,String> hm = new HashMap<Integer,String>();\n        for(int i=0;i<n;i++)\n        {\n            hm.put(sc.nextInt(),sc.next());\n        }\n        Map<Integer,String> syncmap = Collections.synchronizedMap(hm);\n        Iterator<Integer> i=syncmap.keySet().iterator();\n        while(i.hasNext())\n        {\n            int key = i.next();\n            System.out.println(key+\" \"+syncmap.get(key));\n        }\n    }\n}",
    "Create a java program to create and add objects  in hashmap interface.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        HashMap<Integer,String> hm = new HashMap<Integer,String>();\n        for(int i=0;i<n;i++)\n        {\n            hm.put(sc.nextInt(),sc.next());\n        }\n        Iterator<Integer> i=hm.keySet().iterator();\n        while(i.hasNext())\n        {\n            int key = i.next();\n            System.out.println(key + \" \"+hm.get(key));\n        }\n    }\n}",
    "Create a java program to retrieve the key and value from hashtable and display the size of the hashtable and clear the hashtable using clear method concepts.": "import java.util.*;  \npublic class Mapp{  \n public static void main(String args[]){ \n     \n  HashMap<Integer,String> map=new HashMap<Integer,String>(); \n  Scanner sc=new Scanner(System.in);\n  \n  int size=sc.nextInt();\n  for(int i=0;i<size;i++)\n  {\n  Integer a=sc.nextInt();\n  String b=sc.next();\n  map.put(a,b);  \n  } \n \n  \n Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println(\"key: \" + key + \" value: \" + map.get(key)); }\n\nSystem.out.println(\"Size of Map: \" + map.size()); map.clear(); \nSystem.out.println(\"Size of Map: \" + map.size()); \n\n }  \n}  ",
    "Create a java program to create and add objects and apply the synchronized map in hashmap interface then display the map elements.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        Map<Integer,String> hm = new Hashtable<Integer,String>();\n        for(int i=0;i<n;i++)\n        {\n            hm.put(sc.nextInt(),sc.next());\n        }\n        Iterator<Integer> i=hm.keySet().iterator();\n        while(i.hasNext())\n        {\n            int key = i.next();\n            System.out.println(\"key: \" + key + \" value: \"+hm.get(key));\n        }\n        System.out.println(\"Size of Map: \"+hm.size());\n        hm.clear();\n        System.out.println(\"Size of Map: \"+hm.size());\n    }\n}",
    "Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, using the keySet method,searchkey is  3 then clear all values , display the size  in hashmap interface.": "import java.util.*;  \npublic class Mapp{  \n public static void main(String args[]){ \n     \n  Map<Integer,String> map=new Hashtable<>(); \n  Scanner sc=new Scanner(System.in);\n  \n  int size=sc.nextInt();\n  for(int i=0;i<size;i++)\n  {\n  Integer a=sc.nextInt();\n  String b=sc.next();\n  map.put(a,b);  \n  } \n \n  \n Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println(\"key: \" + key + \" value: \" + map.get(key)); }\n\nSystem.out.println(\"Size of Map: \" + map.size()); map.clear(); \nSystem.out.println(\"Size of Map: \" + map.size()); \n\n }  \n}  ",
    "Create a java program to create and add mappings to hashmap and apply mapping for the key is present in HashMap or not present in HashMap for getOrDefault method.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        HashMap<Integer,String> hm = new HashMap<Integer,String>();\n        for(int i=0;i<n;i++)\n        {\n            hm.put(sc.nextInt(),sc.next());\n        }\n        Map<Integer,String> syncmap = Collections.synchronizedMap(hm);\n        Iterator<Integer> i=syncmap.keySet().iterator();\n        while(i.hasNext())\n        {\n            int key = i.next();\n            System.out.println(key+\" \"+syncmap.get(key));\n        }\n    }\n}",
    "Create a java program to retrieve the key and value from hashmap and display the size of the hashmap and clear the hashmap using clear method concepts.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        HashMap<Integer,String> hm = new HashMap<Integer,String>();\n        for(int i=0;i<n;i++)\n        {\n            hm.put(sc.nextInt(),sc.next());\n        }\n        Iterator<Integer> i=hm.keySet().iterator();\n        while(i.hasNext())\n        {\n            int key = i.next();\n            System.out.println(\"key: \" + key + \" value: \"+hm.get(key));\n        }\n        System.out.println(\"Size of Map: \"+hm.size());\n        hm.clear();\n        System.out.println(\"Size of Map: \"+hm.size());\n    }\n}",
    "Create a java program to create and add objects and try to create duplicate key  in hashmap interface.": "import java.util.*;  \npublic class Mapp{  \n public static void main(String args[]){ \n     \n  Map<Integer,String> map=new Hashtable<>(); \n  Scanner sc=new Scanner(System.in);\n  \n  int size=sc.nextInt();\n  for(int i=0;i<size;i++)\n  {\n  Integer a=sc.nextInt();\n  String b=sc.next();\n  map.put(a,b);  \n  } \n \n  \n Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println(\"key: \" + key + \" value: \" + map.get(key)); }\n\nSystem.out.println(\"Size of Map: \" + map.size()); map.clear(); \nSystem.out.println(\"Size of Map: \" + map.size()); \n\n }  \n}  ",
    "Create a java program to create and add mappings to hashmap and  HashMap merge() to Insert New Entry.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        HashMap<Integer,Double> hm = new HashMap<Integer,Double>();\n        for(int i=0;i<n;i++)\n        {\n            hm.put(sc.nextInt(),sc.nextDouble());\n        }\n        Iterator<Integer> i = hm.keySet().iterator();\n        while(i.hasNext())\n        {\n            int key=i.next();\n            System.out.println(key+\" \"+hm.get(key));\n        }\n        System.out.println(hm.containsKey(3));\n        System.out.println(hm.containsValue(3.3));\n    }\n}",
    "Create a java program to create and add objects and apply the synchronized map in linkedhashmap interface then display the map elements.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        LinkedHashMap<Integer,String> hm = new LinkedHashMap<Integer,String>();\n        for(int i=0;i<n;i++)\n        {\n            hm.put(sc.nextInt(),sc.next());\n        }\n        Iterator<Integer> i = hm.keySet().iterator();\n        while(i.hasNext())\n        {\n            int key=i.next();\n            System.out.println(key+\" \"+hm.get(key));\n        }\n    }\n}",
    "Create a java program to retrieve the key and value from linkedhashmap and display the size of the linkekhashmap and clear the linkedhashmap using clear method concepts.": "import java.util.*;  \npublic class Mapp{  \n public static void main(String args[]){ \n     \n  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); \n  Scanner sc=new Scanner(System.in);\n  \n  int size=sc.nextInt();\n  for(int i=0;i<size;i++)\n  {\n  Integer a=sc.nextInt();\n  String b=sc.next();\n  map.put(a,b);  \n  } \n \n  for(Map.Entry m:map.entrySet()){  \n   System.out.println(m.getKey()+\" \"+m.getValue());  \n  }  \n  boolean isEmpty = map.isEmpty(); System.out.println(\"Is HashMap is empty: \" + isEmpty);\n }  \n}  ",
    "Create a java program to create and add mappings to linkedhashmap and  linkedhashmap merge() to Insert New Entry.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        LinkedHashMap<String,Integer> lm=new LinkedHashMap<String,Integer>();\n        for (int i=0;i<n;i++)\n        {\n            lm.put(sc.next(),sc.nextInt());\n        }\n        System.out.println(\"HashMap: \"+lm);\n        int re=lm.merge(\"Shirt\",100,(oldValue,newValue)->oldValue+newValue);\n        System.out.println(\"Price of Shirt: \"+re);\n        System.out.println(\"Updated HashMap: \"+lm);\n    }\n}",
    "Create a java program to retrieve the key and value from linkedhashmap for all input value.": "import java.util.*;  \npublic class Mapp{  \n public static void main(String args[]){ \n     \n  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); \n  Scanner sc=new Scanner(System.in);\n  \n  int size=sc.nextInt();\n  for(int i=0;i<size;i++)\n  {\n  Integer a=sc.nextInt();\n  String b=sc.next();\n  map.put(a,b);  \n  } \n \n  \n Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println(\"key: \" + key + \" value: \" + map.get(key)); }\n\nSystem.out.println(\"Size of Map: \" + map.size()); map.clear(); \nSystem.out.println(\"Size of Map: \" + map.size()); \n\n }  \n}  ",
    "Create a java program to create and add mappings to hashmap and apply  putifabsent method() for key already not present or present in linkedhashmap interface.": "import java.util.*;  \npublic class Mapp{  \n    public static void main(String args[]){ \n        LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); \n        Scanner sc=new Scanner(System.in);\n        \n        int size=sc.nextInt();\n        for(int i=0;i<size;i++)\n        {\n            map.put(sc.nextInt(),sc.next());  \n        } \n        \n        Iterator<Integer> i = map.keySet().iterator();\n        while(i.hasNext())\n        {\n            int key=i.next();\n            System.out.println(key+\" \"+map.get(key));\n        }\n        \n        System.out.println(\"Value for key 1:  \" + map.getOrDefault(1, \"Not Found\"));\n        System.out.println(\"Value for key 4: \" + map.getOrDefault(4, \"Not Found\"));\n        System.out.println(\"Updated Elements: \" + map);\n    }  \n}  ",
    "Create a java program to create and add objects and check whether map is empty or not in linkedhashmap interface.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        LinkedHashMap<Integer,String> hm = new LinkedHashMap<Integer,String>();\n        for(int i=0;i<n;i++)\n        {\n            hm.put(sc.nextInt(),sc.next());\n        }\n        Iterator<Integer> i = hm.keySet().iterator();\n        while(i.hasNext())\n        {\n            int key=i.next();\n            System.out.println(key+\" \"+hm.get(key));\n        }\n        System.out.println(\"Is HashMap is empty: \"+hm.isEmpty());\n    }\n}",
    "Create a java program to create and add objects and check whether a particular key/value exist  in linkedhashmap interface.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        LinkedHashMap<Integer,Double> hm = new LinkedHashMap<Integer,Double>();\n        for(int i=0;i<n;i++)\n        {\n            hm.put(sc.nextInt(),sc.nextDouble());\n        }\n        Iterator<Integer> i = hm.keySet().iterator();\n        while(i.hasNext())\n        {\n            int key=i.next();\n            System.out.println(key+\" \"+hm.get(key));\n        }\n        System.out.println(hm.containsKey(3));\n        System.out.println(hm.containsValue(3.3));\n    }\n}",
    "Create a java program to retrieve the value from linkedhashmap .": "import java.util.*;  \npublic class Mapp{  \n public static void main(String args[]){ \n     \n  LinkedHashMap<Integer,Double> map=new LinkedHashMap<>(); \n  Scanner sc=new Scanner(System.in);\n  \n  int size=sc.nextInt();\n  for(int i=0;i<size;i++)\n  {\n  Integer a=sc.nextInt();\n  Double b=sc.nextDouble();\n  map.put(a,b);  \n  } \n \n  for(Map.Entry m:map.entrySet()){  \n   System.out.println(m.getKey()+\" \"+m.getValue());  \n  }  \n \n         \n        System.out.println(map.containsKey(3));     \n         \n       \n        System.out.println(map.containsValue(3.3)); \n }  \n}  ",
    "Create a java program to create and add mappings to linkedhashmap and apply mapping for the key is present in linkedHashMap or not present in linkedHashMap for getOrDefault method.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        LinkedHashMap<Integer,String> hm = new LinkedHashMap<Integer,String>();\n        for(int i=0;i<n;i++)\n        {\n            hm.put(sc.nextInt(),sc.next());\n        }\n        Iterator<Integer> i = hm.keySet().iterator();\n        while(i.hasNext())\n        {\n            int key=i.next();\n            System.out.println(key+\" \"+hm.get(key));\n        }\n        System.out.println(\"value: \"+hm.get(100));\n    }\n}",
    "Create a java program to remove the key of 100 and to display the key and value from linkedhashmap .": "import java.util.*;  \npublic class Mapp{  \n public static void main(String args[]){ \n     \n  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); \n  Scanner sc=new Scanner(System.in);\n  \n  int size=sc.nextInt();\n  for(int i=0;i<size;i++)\n  {\n  Integer a=sc.nextInt();\n  String b=sc.next();\n  map.put(a,b);  \n  } \n \n  for(Map.Entry m:map.entrySet()){  \n   System.out.println(m.getKey()+\" \"+m.getValue());  \n  }\n  Integer key = 100; String value = map.get(key);\n\n\n  System.out.println(\"value: \"+ value);\n\n\n }  \n}  ",
    "Create a java program for map interface concept and follow the below conditions and display the value and string.(use comparingByValue() in descending order )": "import java.util.*;  \npublic class MapExample3{  \n    public static void main(String args[])\n    {  \n        HashMap<Integer,String> map=new HashMap<Integer,String>();          \n        Scanner sc=new Scanner(System.in);\n        \n        int size=sc.nextInt();\n        for(int i=0;i<size;i++)\n        {\n            map.put(sc.nextInt(),sc.next());  \n        }   \n        \n        map.entrySet()  \n        .stream()  \n        .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())) \n        .forEach(System.out::println);  \n    }  \n}",
    "Create a java program to retrieve the key and value from map and display the size of the map and clear the map using clear method concepts.": "import java.util.*;  \npublic class Mapp{  \n public static void main(String args[]){ \n     \n  Map<Integer,String> map=new HashMap<Integer,String>(); \n  Scanner sc=new Scanner(System.in);\n  \n  int size=sc.nextInt();\n  for(int i=0;i<size;i++)\n  {\n  Integer a=sc.nextInt();\n  String b=sc.next();\n  map.put(a,b);  \n  } \n \n  for(Map.Entry m:map.entrySet()){  \n   System.out.println(m.getKey()+\" \"+m.getValue());  \n  }  \n }  \n}  ",
    "Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the LinkedHashmap.": "import java.util.*;  \npublic class Mapp{  \n    public static void main(String args[])\n    { \n        Map<Integer,String> map=new HashMap<Integer,String>(); \n        Scanner sc=new Scanner(System.in);\n        \n        int size=sc.nextInt();\n        for(int i=0;i<size;i++)\n        {\n            Integer a=sc.nextInt();\n            String b=sc.next();\n            map.put(a,b);  \n        } \n        \n        Iterator<Integer> i = map.keySet().iterator(); \n        while(i.hasNext())\n        {\n            Integer key = i.next(); \n            System.out.println(\"key: \" + key + \" value: \" + map.get(key));\n        }\n        System.out.println(\"Size of Map: \"+map.size());\n        map.clear();\n        System.out.println(\"Size of Map: \"+map.size());\n    }  \n}",
    "Create a java program to retrieve the key and value from hashtable and display the size of the hashtable and clear the hashtable using clear method concepts with map interface.": "import java.util.*;  \npublic class Mapp{  \n public static void main(String args[]){ \n     \n  Map<Integer,String> map=new HashMap<Integer,String>(); \n  Scanner sc=new Scanner(System.in);\n  \n  int size=sc.nextInt();\n  for(int i=0;i<size;i++)\n  {\n  Integer a=sc.nextInt();\n  String b=sc.next();\n  map.put(a,b);  \n  } \n \n  \n Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println(\"key: \" + key + \" value: \" + map.get(key)); }\n\nSystem.out.println(\"Size of Map: \" + map.size()); map.clear(); \nSystem.out.println(\"Size of Map: \" + map.size()); \n\n }  \n}  ",
    "Create a java program to create and add objects and display the map elements after replace key 100 for \"welcome to java\" in map interface and then display one more time.": "import java.util.*;  \npublic class Mapp {  \n    public static void main(String args[])\n    { \n        Map<Integer,String> map=new LinkedHashMap<Integer,String>(); \n        Scanner sc=new Scanner(System.in);\n        \n        int size=sc.nextInt();\n        for(int i=0;i<size;i++)\n        {\n            map.put(sc.nextInt(),sc.next());  \n        } \n        Map<Integer,String> numbers = new Hashtable<>();\n        int size1=sc.nextInt();\n        for(int i=0;i<size1;i++)\n        {\n            numbers.put(sc.nextInt(),sc.next());  \n        } \n        numbers.putAll(map);\n        System.out.println(\"Numbers: \" + numbers);\n    }\n}",
    "Create a java program to display the name with key  using map interface like key , value pair.": "import java.util.*;  \npublic class Mapp {\n    public static void main(String args[])\n    {\n    \n        Map<Integer,String> map=new HashMap<>(); \n        Scanner sc=new Scanner(System.in);\n        \n        int size=sc.nextInt();\n        for(int i=0;i<size;i++)\n        {\n            Integer a=sc.nextInt();\n            String b=sc.next();\n            map.put(a,b);  \n        }\n        for(Map.Entry m:map.entrySet())\n        {\n            System.out.println(m.getKey()+\" \"+m.getValue());  \n        }\n    }  \n}  ",
    "Write a Java program of swap two elements in a list. Swapping 1st(index 0) element with the 3rd(index 2) element.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        String[] arr=new String[n];\n        for(int i=0;i<n;i++)\n        {\n            arr[i]=sc.next();\n        }\n        System.out.println(\"Array list before Swap:\");\n        for (String i:arr)\n            System.out.println(i);\n        String temp=arr[0];\n        arr[0]=arr[2];\n        arr[2]=temp;\n        System.out.println(\"Array list after swap:\");\n        for (String i:arr)\n            System.out.println(i);\n    }\n}",
    "Create a java program to display true message for containsKey of 104 otherwise return false and to retrieve the key and value from hashmap .": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        Map<Integer,String> lm=new HashMap<Integer,String>();\n        for(int i=0;i<n;i++)\n        {\n            lm.put(sc.nextInt(),sc.next());\n        }\n        Iterator<Integer> i=lm.keySet().iterator();\n        while(i.hasNext())\n        {\n            int key=i.next();\n            System.out.println(\"key: \"+key+\" value: \"+lm.get(key));\n        }\n        System.out.println(\"Does HashMap contains 104 as key: \"+lm.containsKey(104));\n    }\n}",
    "Create a java program to create and add objects and check whether map is empty or not in map interface.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        Map<Integer,String> lm=new HashMap<Integer,String>();\n        for(int i=0;i<n;i++)\n        {\n            lm.put(sc.nextInt(),sc.next());\n        }\n        Iterator<Integer> i=lm.keySet().iterator();\n        while(i.hasNext())\n        {\n            int key=i.next();\n            System.out.println(key+\" \"+lm.get(key));\n        }\n        System.out.println(\"Is HashMap is empty: \"+lm.isEmpty());\n    }\n}"
}