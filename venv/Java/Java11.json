{
    "Write a Java program to get all keys from the given a Tree Map.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        TreeMap<String,String> tm = new TreeMap<String,String>();\n        for(int i=0;i<n;i++)\n        {\n            tm.put(sc.next(),sc.next());\n        }\n        Set<String> key=tm.keySet();\n        for (String i:key)\n            System.out.println(i);\n    }\n}",
    "For example:": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        TreeMap<Integer, String> tm=new TreeMap<Integer, String>();\n        for(int i=0;i<n;i++)\n        {\n            tm.put(sc.nextInt(),sc.next());\n        }\n        System.out.println(\"Value before poll: \"+tm);\n        System.out.println(\"Value returned: \"+tm.pollFirstEntry());\n        System.out.println(\"Value after poll: \"+tm);\n    }\n}",
    "Write a Java program to get the portion of a map whose keys are strictly less than a given key.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        TreeMap<Integer,String> tm = new TreeMap<Integer,String>();\n        for(int i=0;i<n;i++)\n        {\n            tm.put(sc.nextInt(),sc.next());\n        }\n        System.out.println(\"Orginal TreeMap content: \"+tm);\n        System.out.println(\"Greatest key: \"+tm.firstKey());\n        System.out.println(\"Least key: \"+tm.lastKey());\n    }\n}",
    "Write a Java program to get NavigableSet view of the keys contained in a map.": "import java.util.*;\nimport java.util.Map.Entry;  \npublic class Example6 {  \n    public static void main(String args[]){  \n\n   TreeMap<String,String> tree_map1 = new TreeMap<String,String>();      \n  Scanner sc=new Scanner(System.in);\n   int size=sc.nextInt();\n   for(int i=0;i<size;i++)\n   {\n      String n1 = sc.next();\n      String s1= sc.next();\n       \n   \t  tree_map1.put(n1,s1);  \n   }\n    \n\n  System.out.println(\"Orginal TreeMap content: \" + tree_map1);\n  System.out.println(\"Greatest key: \" + tree_map1.firstKey());\n  System.out.println(\"Least key: \" + tree_map1.lastKey());\n    }\n}\n ",
    "Write a Java program to get the least key greater than or equal to the given key. Returns null if there is no such key.": "import java.util.*;\nimport java.util.Map.Entry;  \npublic class Example11 {  \n    public static void main(String args[])\n    {\n        TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();\n        Scanner sc=new Scanner(System.in);\n        int size=sc.nextInt();\n        for(int i=0;i<size;i++)\n        {\n            tree_map1.put(sc.nextInt(),sc.next());  \n        }\n        System.out.println(\"Orginal TreeMap content: \" + tree_map1);\n        System.out.println(\"Checking the entry for 10: \");\n        System.out.println(\"Value is: \" + tree_map1.floorEntry(10));\n        System.out.println(\"Checking the entry for 30: \");\n        System.out.println(\"Value is: \" + tree_map1.floorEntry(30));\n        System.out.println(\"Checking the entry for 70: \");\n        System.out.println(\"Value is: \" + tree_map1.floorEntry(70));\n    }\n}",
    "Write a Java program to search a value in a Tree Map.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        TreeMap<String,String> tm = new TreeMap<String,String>();\n        for(int i=0;i<n;i++)\n        {\n            tm.put(sc.next(),sc.next());\n        }\n        System.out.println(tm);\n        if (tm.containsValue(\"Green\"))\n            System.out.println(\"The TreeMap contains value Green\");\n        else\n            System.out.println(\"The TreeMap does not contain value Green\");\n            \n        if (tm.containsValue(\"Pink\"))\n            System.out.println(\"The TreeMap contains value Pink\");\n        else\n            System.out.println(\"The TreeMap does not contain value Pink\");\n    }\n}",
    "Write a Java program to get a key-value mapping associated with the greatest key and the least key in a map.": "import java.util.*;  \npublic class Ex {  \n   public static void main(String args[]){  \n  \n\n   TreeMap<String,String> tree_map1=new TreeMap<String,String>();      \n  \n \n   Scanner sc=new Scanner(System.in);\n   int size=sc.nextInt();\n   for(int i=0;i<size;i++)\n   {\n      String n1 = sc.next();\n      String s1= sc.next();\n       \n   \t  tree_map1.put(n1,s1);  \n   }\n    \n  System.out.println(tree_map1);\n        if(tree_map1.containsValue(\"Green\")){\n            System.out.println(\"The TreeMap contains value Green\");\n        } else {\n            System.out.println(\"The TreeMap does not contain value Green\");\n        }\n        if(tree_map1.containsValue(\"Pink\")){\n            System.out.println(\"The TreeMap contains value Pink\");\n        } else {\n            System.out.println(\"The TreeMap does not contain value Pink\");\n        }\n    \n    }\n}\n",
    "Write a Java program to get a key-value mapping associated with the greatest key less than or equal to the given key. ": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        TreeMap<Integer,String> tm = new TreeMap<Integer,String>();\n        for(int i=0;i<n;i++)\n        {\n            tm.put(sc.nextInt(),sc.next());\n        }\n        System.out.println(\"Orginal TreeMap content: \"+tm);\n        System.out.println(\"Greatest key: \"+tm.firstEntry());\n        System.out.println(\"Least key: \"+tm.lastEntry());\n    }\n}",
    "Write a java program to illustrate Comparator using a separate class(Percentage comparator).Read student name and percentage of student).Display in highest percentage to low using comparator.": "import java.util.*;\nclass Student\n{\n\tString name;\n\tfloat percentage;\n\tStudent(String name, float percentage)\n\t{\n\t\tthis.name = name;\n\t\tthis.percentage = percentage;\n\t}\n}\nclass PercentageComparator implements Comparator<Student> {\n\tpublic int compare(Student stud1, Student stud2)\n\t{\n\t\tif(stud1.percentage < stud2.percentage)\n\t\t\treturn 1;\n\t\treturn -1;\n\t}\n}\npublic class Main {\n\tpublic static void main(String args[])\n\t{\n\t\n\t\tArrayList<Student> studList = new ArrayList<Student>();\n\t\tScanner sc=new Scanner(System.in);\n\t\tint size=sc.nextInt();\n\t\tfor(int i=0;i<size;i++)\n\t\t{\n\t\t    studList.add(new Student(sc.next(), sc.nextInt()));\n\t\t}\n\t\t\n\t\tComparator<Student> com = new PercentageComparator();\n\t\t\n\t\tCollections.sort(studList, com);\n\t\t\n\t\tSystem.out.println(\"Avg % --> Name\");\n\t\tSystem.out.println(\"---------------------\");\n\t\tfor(Student stud:studList) \n\t\t{\n\t\t\tSystem.out.println(stud.percentage + \" --> \" + stud.name);\n\t\t}\t\t\n\t}\t\n}",
    "Write a java program to sort using treeset collection,this object needs to be passed in the constructor of TreeSet. Sorting elements in a collection using Comparator interface, we need to pass the class object that implements Comparator interface.Finally Display it.": "import java.util.*;\nclass Student\n{\n    int roll;\n    String name;\n    Student(int r,String n)\n    {\n        roll = r;\n        name = n;\n    }\n    public String toString()\n    {\n        return roll+\" \"+name;\n    }\n}\nclass MyComparator implements Comparator<Student>\n{\n    public int compare(Student s1,Student s2)\n    {\n        if(s1.roll == s2.roll)\n            return 0;\n        else if(s1.roll > s2.roll)\n            return 1;\n        else\n            return -1;\n    }\n}\npublic class Test {\n    public static void main(String[] args)\n    {\n        TreeSet< Student> ts = new TreeSet< Student>(new MyComparator());\n        Scanner sc=new Scanner(System.in);\n        int size=sc.nextInt();\n        for(int i=0;i<size;i++)\n        {\n            ts.add(new Student(sc.nextInt(),sc.next()));\n        }\n        System.out.println(ts);\n    }\n}",
    "Write a Java program to sort a list of characters in reverse order using Comparable interface.Apply LinkedList concepts.": "import java.util.*;\nclass Person implements Comparable<Person> {\n    private String name;\n    private int age;\n   \n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public int getAge() {\n        return this.age;\n    }\n    public String getName() {\n        return this.name;\n    }\n    \n    @Override\n    public String toString() {\n        return \"\";\n    }\n    \n    @Override\n    public int compareTo(Person per) {\n        if(this.age == per.age)\n            return 0;\n        else\n            return this.age > per.age ? 1 : -1;\n    }\n}\npublic class Main{\n    public static void main(String[] args) {\n        \n        Scanner sc=new Scanner(System.in);\n        Person p1 = new Person(sc.next(), sc.nextInt());\n        Person p2 = new Person(sc.next(), sc.nextInt());\n        int ageDiff = p1.compareTo(p2);    \n        switch(ageDiff) {\n            case -1: {\n                System.out.println(p2.getName() + \" is older than \" + p1.getName());\n                break;\n            }\n           case 1: {\n                System.out.println(p1.getName() + \" is older than \" + p2.getName());\n                break;\n                }\n             default:\n                System.out.println(p1.getName () + \" and \" + p2.getName () \n                                + \" are of the same age!\");\n        }\n    }\n}",
    "To demonstrate the working of comparator interface , Create a student class (attribute is rollno,name,address) use constructor concepts, with the help of another class implement the comparator interface(sorting in ascending order of rollno), in main class create the arraylist and add the rollno,name and address and with help of collection sort by the rollno.": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nclass Student {\n    int rollno;\n    String name, address;\n    public Student(int rollno, String name, String address)\n    {\n        this.rollno = rollno;\n        this.name = name;\n        this.address = address;\n    }\n    public String toString()\n    {\n         return this.rollno + \" \" + this.name + \" \" + this.address;\n    }\n}\nclass Sortbyroll implements Comparator<Student> {\n    public int compare(Student a, Student b)\n    {\n        return a.rollno - b.rollno;\n    }\n} \npublic class Main {\n    public static void main(String[] args)\n    {\n        ArrayList<Student> ar = new ArrayList<Student>();\n        Scanner sc=new Scanner(System.in);\n        int size=sc.nextInt();\n        for(int i=0;i<size;i++)\n        {\n            ar.add(new Student(sc.nextInt(),sc.next(),sc.next()));\n        }\n      \n        System.out.println(\"Unsorted\");\n        for (int i = 0; i < ar.size(); i++)\n            System.out.println(ar.get(i));\n \n        Collections.sort(ar, new Sortbyroll());\n        \n        System.out.println(\"Sorted by rollno\");\n        for (int i = 0; i < ar.size(); i++)\n            System.out.println(ar.get(i));\n    }\n}",
    "Write a java program to sort the given elements based on comparator interface and also use the linkedlist concepts in java collection.": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nclass Student {\n \n    int rollno;\n    String name, address;\n    public Student(int rollno, String name, String address)\n    {\n        this.rollno = rollno;\n        this.name = name;\n        this.address = address;\n    }\n    public String toString()\n    {\n         return this.rollno + \" \" + this.name + \" \"\n            + this.address;\n    }\n}\nclass Sortbyroll implements Comparator<Student> {\n    public int compare(Student a, Student b)\n    {\n \n        return a.rollno - b.rollno;\n    }\n} \npublic class Main {\n    public static void main(String[] args)\n    {\n        ArrayList<Student> ar = new ArrayList<Student>();\n        Scanner sc=new Scanner(System.in);\n        int size=sc.nextInt();\n        for(int i=0;i<size;i++)\n        {\n        ar.add(new Student(sc.nextInt(),sc.next(),sc.next()));\n        }\n      \n        System.out.println(\"Unsorted\");\n \n        \n        for (int i = 0; i < ar.size(); i++)\n            System.out.println(ar.get(i));\n \n        Collections.sort(ar, new Sortbyroll());\n \n   \n        System.out.println(\"Sorted by rollno\");\n \n        \n        for (int i = 0; i < ar.size(); i++)\n            System.out.println(ar.get(i));\n \n       \n    }\n}",
    "Write a Java program to sort a list of name in reverse order using Comparable interface.Apply LinkedList concepts.": "import java.util.*;\npublic class Main {\n    public static void main(String[] args)\n    {\n        List<Integer> list2 = new ArrayList<Integer>();\n        Scanner sc=new Scanner(System.in);\n        int size=sc.nextInt();\n        for(int i=0;i<size;i++)\n        {\n            list2.add(sc.nextInt());\n        }\n        list2.sort(new Comparator<Integer>()\n        {\n            @Override\n            public int compare(Integer num1, Integer num2)\n            {\n                return num1.compareTo(num2);\n            }\n        });\n        for (Integer num : list2)\n        {\n            System.out.println(num);\n        }\n    }\n}",
    "Write a java program sort ArrayList objects in accordance with more than one fields like firstly sort, according to student name and secondly sort according to student roll number.Apply comparator interface.": "import java.util.*;\nclass Student {\n\tInteger rollno;\n\tString name, address;\n\tpublic Integer getRollno()\n\t{\n\t\treturn rollno;\n\t}\n\n\tpublic void setRollno(Integer rollno)\n\t{\n\t\tthis.rollno = rollno;\n\t}\n\n\tpublic String getName()\n\t{\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name)\n\t{\n\t\tthis.name = name;\n\t}\n\n\tpublic String getAddress()\n\t{\n\t\treturn address;\n\t}\n\n\tpublic void setAddress(String address)\n\t{\n\t\tthis.address = address;\n\t}\n\n\tpublic Student(Integer rollno, String name, String address)\n\t{\n\t\tsuper();\n\t\tthis.rollno = rollno;\n\t\tthis.name = name;\n\t\tthis.address = address;\n\t}\n\n\tpublic String toString()\n\t{\n\t\treturn this.rollno + \" \" + this.name + \" \" + this.address;\n\t}\n}\n\nclass SortByNameAndRollNum implements Comparator<Student>\n{\n    public int compare(Student a, Student b)\n    {\n\t\tint NameCompare = a.getName().compareTo(b.getName());\n\t\tint RollNumCompare = a.getRollno().compareTo(b.getRollno());\n\t\tif (NameCompare == 0)\n\t\t{\n\t\t\treturn ((RollNumCompare == 0) ? NameCompare : RollNumCompare);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn NameCompare;\n\t\t}\n\t}\n}\n\npublic class Main {\n\tpublic static void main(String[] args)\n\t{\n\t\tArrayList<Student> ar = new ArrayList<Student>();\n\t\tar.add(new Student(111, \"aaaa\", \"london\"));\n\t\tar.add(new Student(131, \"aaaa\", \"nyc\"));\n\t\tar.add(new Student(121, \"cccc\", \"jaipur\"));\n\n\t\tSystem.out.println(\"Unsorted\");\n\t\tfor (int i = 0; i < ar.size(); i++)\n\t\t\tSystem.out.println(ar.get(i));\n\n\t\tCollections.sort(ar, new SortByNameAndRollNum());\n\n\t\tSystem.out.println(\"\\nSorted by namd and rolNum\");\n\t\tfor (int i = 0; i < ar.size(); i++)\n\t\t\tSystem.out.println(ar.get(i));\n\t}\n}",
    "Java program implements a Person class that contains name and age as member fields. This class implements a \u2018Comparable\u2019 interface that will allow us to sort the object of class Person.": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\n\nclass Student {\n\tInteger rollno;\n\tString name, address;\n\n\tpublic Integer getRollno() {\n\t\treturn rollno;\n\t}\n\n\tpublic void setRollno(Integer rollno) {\n\t\tthis.rollno = rollno;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic String getAddress() {\n\t\treturn address;\n\t}\n\n\tpublic void setAddress(String address) {\n\t\tthis.address = address;\n\t}\n\n\tpublic Student(Integer rollno, String name, String address) {\n\t\tsuper();\n\t\tthis.rollno = rollno;\n\t\tthis.name = name;\n\t\tthis.address = address;\n\t}\n\n\n\tpublic String toString() {\n\t\treturn this.rollno + \" \" + this.name + \" \" + this.address;\n\t}\n}\n\nclass SortByNameAndRollNum implements Comparator<Student> {\n\t\n\tpublic int compare(Student a, Student b) {\n\n\t\t\n\t\tint NameCompare = a.getName().compareTo(b.getName());\n\t\tint RollNumCompare = a.getRollno().compareTo(b.getRollno());\n\n\t\tif (NameCompare == 0) {\n\t\t\treturn ((RollNumCompare == 0) ? NameCompare : RollNumCompare);\n\t\t} else {\n\t\t\treturn NameCompare;\n\t\t}\n\n\t}\n}\n\n// Driver class\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tArrayList<Student> ar = new ArrayList<Student>();\n\t\tar.add(new Student(111, \"aaaa\", \"london\"));\n\t\tar.add(new Student(131, \"aaaa\", \"nyc\"));\n\t\tar.add(new Student(121, \"cccc\", \"jaipur\"));\n\n\t\tSystem.out.println(\"Unsorted\");\n\t\tfor (int i = 0; i < ar.size(); i++)\n\t\t\tSystem.out.println(ar.get(i));\n\n\t\tCollections.sort(ar, new SortByNameAndRollNum());\n\n\t\tSystem.out.println(\"\\nSorted by namd and rolNum\");\n\t\tfor (int i = 0; i < ar.size(); i++)\n\t\t\tSystem.out.println(ar.get(i));\n\n\t}\n}",
    "Write a java program to read and get the enumeration of the values present in the Vector and print the  elements using vector in java collection.(Use elements() method)": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        Vector<String> vec= new Vector<String>();\n        for (int i=0;i<n;i++)\n        {\n            vec.add(sc.next());\n            vec.add(sc.next());\n        }\n        System.out.println(\"The vector is: \"+vec);\n        Enumeration enu = vec.elements();\n        System.out.println(\"The enumeration of values are:\");\n        while (enu.hasMoreElements())\n        {\n            System.out.println(enu.nextElement());\n        }\n    }\n}",
    "Write a java program to read and  print all the  elements and also firstelement() using vector method  in java collection.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        Vector<String> vec= new Vector<String>();\n        for (int i=0;i<n;i++)\n        {\n            vec.add(sc.next());\n            vec.add(sc.next());\n        }\n        System.out.println(\"The vector is: \"+vec);\n        System.out.println(\"The first element is: \"+vec.firstElement());\n    }\n}",
    "Write a java program to read and  print all the  elements and return the first position of element in vector object using indexOf(\"welcome\") method and use vector method  in java collection.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n1=sc.nextInt();\n        Vector<String> vec=new Vector<String>();\n        for (int i=0;i<n1;i++)\n        {\n            vec.add(sc.next());\n            vec.add(sc.next());\n        }\n        System.out.println(\"The vector is: \"+vec);\n        System.out.println(\"The last element is: \"+vec.lastElement());\n    }\n}",
    "Write the java program to add the elements in stack and then display the elements.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        Stack<String> st=new Stack<String>();\n        for(int i=0;i<n;i++)\n        {\n            st.push(sc.next());\n        }\n        System.out.println(\"Elements in Stack: \"+st);\n    }\n}",
    "Write the java program to add the elements in stack and then display the elements , then remove all the elements from the stack .Finally display the element of the stack.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n1=sc.nextInt();\n        Vector<String> vec=new Vector<String>();\n        for (int i=0;i<n1;i++)\n        {\n            vec.add(sc.next());\n        }\n        System.out.println(\"The vector is: \"+vec);\n        vec.insertElementAt(\"SEC\",2);\n        System.out.println(\"The new Vector is: \"+vec);\n    }\n}",
    "Write a java program to read and  print the  elements using vector in java collection.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n1=sc.nextInt();\n        Vector<String> vec1=new Vector<String>();\n        for (int i=0;i<n1;i++)\n        {\n            vec1.add(sc.next());\n        }\n        System.out.println(\"The vector is: \"+vec1);\n        int n2=sc.nextInt();\n        Vector<String> vec2=new Vector<String>();\n        for (int i=0;i<n2;i++)\n        {\n            vec2.add(sc.next());\n        }\n        System.out.println(\"The Vector is: \"+vec2);\n        System.out.println(\"Are both of them equal? \"+vec1.equals(vec2));\n    }\n}",
    "Write a java program to read and  print all the  elements and also lastelement() using vector method  in java collection.": "// Java code to illustrate boolean add(Object element)\nimport java.util.*;\n\npublic class VectorDemo {\n\tpublic static void main(String args[])\n\t{\n\n\t\t\n\t\tVector<String> vec_tor = new Vector<String>();\n        Scanner sc=new Scanner(System.in);\n        int size=sc.nextInt();\n\t    for(int i=0;i<size;i++)\n\t    {\n\t\tvec_tor.add(sc.next());\n\t    vec_tor.add(sc.next());\n\t    }\n\t\n\n\t\tSystem.out.println(\"The vector is: \" + vec_tor);\n\n\t\tint size1=sc.nextInt();\n\t    for(int j=0;j<size1;j++)\n\t    {\n\t\tvec_tor.add(sc.next());\n\t    }\n\n\t\n\t\tSystem.out.println(\"The new Vector is: \" + vec_tor);\n\t}\n}\n",
    "Write the java program to check the stack is empty or not and then display the stack.": "import java.util.*;\npublic class VectorDemo {\n\tpublic static void main(String args[])\n\t{\n\t\tVector<String> vec_tor1 = new Vector<String>();\n        Scanner sc=new Scanner(System.in);\n        int size=sc.nextInt();\n\t    for(int i=0;i<size;i++)\n\t    {\n\t\tvec_tor1.add(sc.next());\n\t    }\n\t   \tSystem.out.println(\"The vector is: \" + vec_tor1);\n\n\t    Vector<String> vec_tor2 = new Vector<String>();\n        int size2=sc.nextInt();\n        for(int i=0;i<size2;i++)\n        {\n        vec_tor2.add(sc.next());\n        }\n       \n  \n       System.out.println(\"The Vector is: \"\n                           + vec_tor2);\n  \n        System.out.println(\"Are both of them equal? \"\n                           + vec_tor1.equals(vec_tor2));\n\t\t}\n}\n",
    "Write the java program to add the elements in stack and then display the elements , then remove the elements at the index of 1.Finally display the element of the stack.(use remove() method).After apply the toString() method display it.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n1=sc.nextInt();\n        Vector<String> vec=new Vector<String>();\n        for (int i=0;i<n1;i++)\n        {\n            vec.add(sc.next());\n        }\n        System.out.println(\"The vector is: \"+vec);\n        System.out.println(\"Index of 'welcome' is: \"+vec.indexOf(\"welcome\"));\n    }\n}",
    "write a java program to create an empty vector and add an elements in the vector then create a collection,add element to collection and then appending the collection element to vector .Finally display the vector element.": "import java.util.*;\npublic class Demo {\n\tpublic static void main(String args[])\n\t{\n\t\tVector<String> vt = new Vector<String>();\n\t\tScanner sc=new Scanner(System.in);\n\t    int size=sc.nextInt();\n\t    for(int i=0;i<size;i++)\n\t    {\n    \t\tvt.add(sc.next());\n    \t    vt.add(sc.next());\n\t    }\n\t\tCollection<String> c = new ArrayList<String>();\n     \tint size1=sc.nextInt();\n\t    for(int j=0;j<size1;j++)\n\t    {\n\t\t    c.add(sc.next());\n\t    }\n\t\tSystem.out.println(\"The Vector is: \" + vt);\n\t\tvt.addAll(c);\n\t\tSystem.out.println(\"The new vector is: \" + vt);\n\t}\n}",
    "Write a java program to create vector and read the elements  for two vector in java collection.(Use equals method )": "import java.util.*;\nimport java.util.ArrayList;\n\npublic class GFG {\n\tpublic static void main(String args[])\n\t{\n\t\tVector<String> vt = new Vector<String>();\n\t\tScanner sc=new Scanner(System.in);\n\t    int size=sc.nextInt();\n\t    for(int i=0;i<size;i++)\n\t    {\n\t\tvt.add(sc.next());\n\t    vt.add(sc.next());\n\t    }\n\t\tCollection<String> c = new ArrayList<String>();\n     \tint size1=sc.nextInt();\n\t    for(int j=0;j<size1;j++)\n\t    {\n\t\tc.add(sc.next());\n\t   \n\t    }\n\t\tSystem.out.println(\"The Vector is: \" + vt);\n\n\t\n\t\tvt.addAll(c);\n\n\t\n\t\tSystem.out.println(\"The new vector is: \" + vt);\n\t}\n}\n",
    "Write a java program to Print the top of the element from the Priority Queue.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        PriorityQueue<Integer> pq=new PriorityQueue<Integer>();\n        for(int i=0;i<n;i++)\n        {\n            pq.add(sc.nextInt());\n        }\n        System.out.println(\"Display the top of the element of PriorityQueue: \\n\" + pq.peek());\n    }\n}",
    "Write a java program to display the added elements from the Priority Queue and to insert a particular element into the Priority Queue and then display the elements.(Use offer() method).": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        PriorityQueue<Integer> pq=new PriorityQueue<Integer>();\n        for(int i=0;i<n;i++)\n        {\n            pq.offer(sc.nextInt());\n        }\n        System.out.println(\"Display the element of Queue: \\n\" + pq);\n    }\n}",
    "Write a java program to display the added elements from the Dequeue using java collection.(Use ArrayDeque)": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        PriorityQueue<Integer> pq=new PriorityQueue<Integer>();\n        for(int i=0;i<n;i++)\n        {\n            pq.add(sc.nextInt());\n        }\n        System.out.println(\"Accessed Element: \"+pq.peek());\n    }\n}",
    "Write a java program to display the added elements from the Dequeue using removefirst method in java collection.(Use string)": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        Deque<String> dq=new ArrayDeque<String>();\n        for(int i=0;i<n;i++)\n        {\n            dq.offer(sc.next());\n        }\n        System.out.println(\"Display the element of Dequeue: \\n\" + dq);\n        dq.removeFirst();\n        System.out.println(dq);\n    }\n}",
    "Write a java program to display the head element from the Dequeue using getFirst method  in java collection.(Use string)": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        Deque<Integer> dq=new ArrayDeque<Integer>();\n        for(int i=0;i<n;i++)\n        {\n            dq.offer(sc.nextInt());\n        }\n        System.out.println(\"Display the element of Dequeue: \\n\" + dq);\n        dq.offer(150);\n        System.out.println(\"Display the element of Dequeue after add first element : \\n\" + dq);\n    }\n}",
    "Write a java program to print the top element and removing it from the Priority Queue Container.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        PriorityQueue<Integer> pq=new PriorityQueue<Integer>();\n        for(int i=0;i<n;i++)\n        {\n            pq.offer(sc.nextInt());\n        }\n        System.out.println(\"Display the remove element of PriorityQueue: \\n\" + pq.remove());\n        System.out.println(\"Display the element of PriorityQueue: \\n\" + pq);\n    }\n}",
    "Write a java program  to insert a element into the Priority Queue and to access the elements from priority queue then display the head of the queue elements from priority queue.": "import java.util.*;\n\npublic class PriorityQueueDemo {\n\t\n\n\tpublic static void main(String args[])\n\t{\n\t\n\t\tPriorityQueue<Integer> pQueue = new PriorityQueue<Integer>();\n        \n\t    Scanner sc=new Scanner(System.in);\n\t    int size=sc.nextInt();\n\t    for(int i=0;i<size;i++){\n\t        pQueue.add(sc.nextInt());\n\t    }\n\t   Iterator iterator = pQueue.iterator();\n\t   System.out.println(\"Iterate the elements from the queue using while loop:\");\n  \n        while (iterator.hasNext()) {\n            System.out.print(iterator.next() + \" \");\n        }\n\t\t\n\t}\n}\n",
    "Write a java program to display the added elements from the Dequeue using java collection.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        PriorityQueue<Integer> pq=new PriorityQueue<Integer>();\n        for(int i=0;i<n;i++)\n        {\n            pq.offer(sc.nextInt());\n        }\n        System.out.println(\"Accessed Element: \" + pq.peek());\n    }\n}",
    "Write a java program to display the added elements from the Dequeue using removelast method in java collection.(Use string)": "import java.util.*;\n\npublic class PriorityQueueDemo {\n\t\n\n\tpublic static void main(String args[])\n\t{\n\t\n\t\tPriorityQueue<Integer> pQueue = new PriorityQueue<Integer>();\n        \n\t    Scanner sc=new Scanner(System.in);\n\t    int size=sc.nextInt();\n\t    for(int i=0;i<size;i++){\n\t        pQueue.offer(sc.nextInt());\n\t    }\n\t   \n\t    int number = pQueue.peek();\n        System.out.println(\"Accessed Element: \" + number);\n\n\t\t\n\t}\n}\n",
    "Write a java program to display the added elements from the Priority Queue.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        PriorityQueue<Integer> pq=new PriorityQueue<Integer>();\n        for(int i=0;i<n;i++)\n        {\n            pq.add(sc.nextInt());\n        }\n        Iterator i=pq.iterator();\n        System.out.println(\"Iterate the elements from the queue using while loop:\");\n        while(i.hasNext())\n        {\n            System.out.print(i.next()+\" \");\n        }\n    }\n}",
    "Write a java program to display the added elements from the Dequeue using iterator through deque in java collection.(Use string)": "import java.util.*;\n\npublic class PriorityQueueDemo {\n\t\n\n\tpublic static void main(String args[])\n\t{\n\t\n\t\tPriorityQueue<Integer> pQueue = new PriorityQueue<Integer>();\n        \n\t    Scanner sc=new Scanner(System.in);\n\t    int size=sc.nextInt();\n\t    for(int i=0;i<size;i++){\n\t        pQueue.offer(sc.nextInt());\n\t    }\n\t   \n\t    int number = pQueue.peek();\n        System.out.println(\"Accessed Element: \" + number);\n\n\t\t\n\t}\n}\n",
    "Write a java program to display the removal element from the Dequeue using getLast method  in java collection.(Use string)": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        Deque<Integer> dq=new ArrayDeque<Integer>();\n        for(int i=0;i<n;i++)\n        {\n            dq.offer(sc.nextInt());\n        }\n        System.out.println(\"Display the element of Dequeue: \\n\"+dq);\n    }\n}",
    "Write a java program to compare  two elements , if element is greater means display 1 otherwise display -1 use only comparable interface in java collection.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        Integer n1= Integer.valueOf(sc.nextInt());\n        Integer n2= Integer.valueOf(sc.nextInt());\n        \n        System.out.println(n1.compareTo(n2));\n        System.out.println(n2.compareTo(n1));\n    }\n}",
    "Write a java program to display the removal  element from the Dequeue using pollFirst method  in java collection.(Use string)": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        Deque<String> dq=new ArrayDeque<String>();\n        for(int i=0;i<n;i++)\n        {\n            dq.offer(sc.next());\n        }\n        System.out.println(\"Display the element of Dequeue:\\n\"+dq);\n        System.out.println(dq.pollFirst());\n    }\n}",
    "Write a java program to Find Second Largest Number in Array Java.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        int[] arr=new int[n];\n        for(int i=0;i<n;i++)\n        {\n            arr[i]=sc.nextInt();\n        }\n        Arrays.sort(arr);\n        System.out.println(\"Second largest element = \"+arr[n-2]);\n    }\n}",
    "Write a java program to read and  print the  elements and removes all components from this Vector and sets its size to zero use vector in java collection.": "import java.util.*;\npublic class Demo{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        Vector<String> vec=new Vector<String>();\n        for(int i=0;i<n;i++)\n        {\n            vec.add(sc.next());\n        }\n        System.out.println(\"The vector is: \"+vec);\n        vec.clear();\n        System.out.println(\"The new Vector is: \"+vec);\n    }\n}",
    "Write a Java program to implement the following IS-A relationship.": "import java.util.*;\nclass Vehicle \n{\n    int Vehicle_ID;\n}\nclass Car extends Vehicle\n{\n    String Brand_Name;\n    String Model;\n    void getDetails()\n    {\n        Scanner sc=new Scanner(System.in);\n        Vehicle_ID=sc.nextInt();\n        Brand_Name=sc.next();\n        Model=sc.next();\n    }\n    void display()\n    {\n        System.out.println(\"Vehicle Id is \"+Vehicle_ID+\" Vehicle Name is \"+Brand_Name+\" Model is \"+Model);\n    }\n}\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Car obj = new Car();\n        obj.getDetails();\n        obj.display();\n    }\n}",
    "Write a java program to check wheather LinkedHashSet contains an element or not. It returns true if the set contains element, otherwise returns false.Apply clear method.": "import java.util.Scanner;\nclass Vehicle \n{\n    int Vehicle_ID;\n    \n}\nclass Car extends Vehicle\n{\n   \n String Brand_Name;\n String Model;\nvoid getDetails()\n    {\n        Scanner sc=new Scanner(System.in);\n        Vehicle_ID = sc.nextInt();\n        Brand_Name = sc.next();\n        Model = sc.next();\n    }\n   \nvoid display()\n    {\n        System.out.println(\"Vehicle Id is \"+Vehicle_ID+\" Vehicle Name is \"+Brand_Name+\" Model is \"+Model);\n    }\n    \n}\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Car obj=new Car();\n        obj.getDetails();\n        obj.display();\n    }\n}"
}